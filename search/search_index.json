{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"libsunvox # SunVox C Bindings! Will, in the future, be a fully features library for using and playing with sunvox. Installation # This was only tested on Ubuntu so it might not work on other systems :( Run sudo ./install.sh to install sunvox library. Then run ./run-example.sh to run a test Docs # https://sol-vin.github.io/libsunvox/ Usage Example # require \"libsunvox\" # Set the audiodevice and audiodevice_in to your device then speak into your microphone :) SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) input = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: INPUT ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) carrier = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) modulator = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) vocoder = SunVox . load_module ( slot , \"./rsrc/vocoder.sunsynth\" ) # Connect the module to the output SunVox . connect_module ( slot , input , modulator ) SunVox . connect_module ( slot , generator , carrier ) SunVox . connect_module ( slot , carrier , vocoder ) SunVox . connect_module ( slot , modulator , vocoder ) SunVox . connect_module ( slot , vocoder , SunVox :: OUTPUT_MODULE ) SunVox . update_input SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 0x1 ) # Set carrier controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 1 , ctl_value : 0x4000 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 2 , ctl_value : 0x8000 ) # Set modulator controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 1 , ctl_value : 0x69c0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 2 , ctl_value : 0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: D1 , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: D2 , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: D3 , 0 , generator ) SunVox . send_event ( slot , 3 , SunVox :: Note :: G4 , 0 , generator ) SunVox . send_event ( slot , 4 , SunVox :: Note :: D5 , 0 , generator ) sleep Development # TODO: Write development instructions here Contributing # Fork it ( https://github.com/sol-vin/libsunvox/fork ) Create your feature branch ( git checkout -b my-new-feature ) Commit your changes ( git commit -am 'Add some feature' ) Push to the branch ( git push origin my-new-feature ) Create a new Pull Request Contributors # Ian Rash - creator and maintainer Powered by SunVox (modular synth & tracker) Copyright (c) 2008 - 2020, Alexander Zolotov nightradio@gmail.com , WarmPlace.ru","title":"Usage"},{"location":"index.html#libsunvox","text":"SunVox C Bindings! Will, in the future, be a fully features library for using and playing with sunvox.","title":"libsunvox"},{"location":"index.html#installation","text":"This was only tested on Ubuntu so it might not work on other systems :( Run sudo ./install.sh to install sunvox library. Then run ./run-example.sh to run a test","title":"Installation"},{"location":"index.html#docs","text":"https://sol-vin.github.io/libsunvox/","title":"Docs"},{"location":"index.html#usage-example","text":"require \"libsunvox\" # Set the audiodevice and audiodevice_in to your device then speak into your microphone :) SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) input = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: INPUT ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) carrier = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) modulator = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) vocoder = SunVox . load_module ( slot , \"./rsrc/vocoder.sunsynth\" ) # Connect the module to the output SunVox . connect_module ( slot , input , modulator ) SunVox . connect_module ( slot , generator , carrier ) SunVox . connect_module ( slot , carrier , vocoder ) SunVox . connect_module ( slot , modulator , vocoder ) SunVox . connect_module ( slot , vocoder , SunVox :: OUTPUT_MODULE ) SunVox . update_input SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 0x1 ) # Set carrier controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 1 , ctl_value : 0x4000 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 2 , ctl_value : 0x8000 ) # Set modulator controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 1 , ctl_value : 0x69c0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 2 , ctl_value : 0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: D1 , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: D2 , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: D3 , 0 , generator ) SunVox . send_event ( slot , 3 , SunVox :: Note :: G4 , 0 , generator ) SunVox . send_event ( slot , 4 , SunVox :: Note :: D5 , 0 , generator ) sleep","title":"Usage Example"},{"location":"index.html#development","text":"TODO: Write development instructions here","title":"Development"},{"location":"index.html#contributing","text":"Fork it ( https://github.com/sol-vin/libsunvox/fork ) Create your feature branch ( git checkout -b my-new-feature ) Commit your changes ( git commit -am 'Add some feature' ) Push to the branch ( git push origin my-new-feature ) Create a new Pull Request","title":"Contributing"},{"location":"index.html#contributors","text":"Ian Rash - creator and maintainer Powered by SunVox (modular synth & tracker) Copyright (c) 2008 - 2020, Alexander Zolotov nightradio@gmail.com , WarmPlace.ru","title":"Contributors"},{"location":"BASICS.html","text":"Welcome to the basics! # Here you will learn everything I know about SunVox, it's libraries, and all the cool stuff it can do! First of all, if you haven't headed over to warmplace.ru , please give SunVox a look over. The tool is surprisingly simple to use, and can save you a lot of work. Check out it's tutorial for more information. However, you do not have to use the SunVox application at all, which is why this library exists for us to use. A quick SunVox 101 # This is the quickest dirtiest intro into the realm that is SunVox. SunVox is a modular synthesizer and tracker. What that means is that you can build instruments, and play notes through them. A sunvox file is a whole \"song\". This song is made up of two parts, the \"tracker\" which controls the notes played (essentially) and the modular synth, which uses a series of connected modules to make a instrument. In the tracker, the notes to be played are stored in patterns, which can be easily duplicated and it's position changed. The SunVox library allows you to control all those aspects. Install # Run sudo ./install.sh . You may need to install the correct arch library into the correct location. Basic setup # require \"libsunvox\" # Starts the SunVox audio engine # Set the audiodevice and audiodevice_in to your devices # Automatically adds an `at_exit` hook to close all the slots that are open, and stop the engine. SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) # Opens a slot for us to use slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) A slot contains a single song or .sunvox file. You can have multiple slots playing multiple songs at the same time. You have a maximum of 16 slots as allowed in SunVox::Slot . You can load any sunvox file into the slot of your choice by using: SunVox . load ( slot , \"./file/some_file.sunvox\" ) You have many easy to use controls for playback control SunVox . play_from_beginning ( slot ) SunVox . play ( slot ) SunVox . pause ( slot ) SunVox . resume ( slot ) SunVox . stop ( slot ) # When used twice stops all sounds completely (Also known as SunVox::Note::CleanSynths) SunVox . skip_to_line ( slot , line_number ) SunVox . set_repeat ( slot , true | false ) SunVox . repeats? ( slot ) # Does the track repeat? SunVox . volume ( slot , 256_u8 ) # Max volume How to play any song. require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot \"./file.sunvox\" ) SunVox . play_from_beginning ( slot ) sleep # Wait forever You can also get the names, and other information for the modules, patterns, and the song in a slot, using methods like SunVox.get_song_tpl or SunVox.get_number_of_patterns . You can also process any event SunVox has to offer. What's an event? It's an instruction executed by SunVox to do either one, some, or all of the following: Play a note on a module, set a controller value on a module, set an effect on a note. Modules are interconnected sound pipelines that alter or produce sound in some way. For example, you could take your microphone input (A SunVox::Modules::Synths::INPUT ) and pipe it into the reverb module ( SunVox::Modules::Effects::REVERB ), then pipe that reverb module to output ( SunVox::OUTPUT_MODULE ). All modules have controllers which control different ways the module behaves. For example, the volume controller controls it's output volume. Each module type has unique controllers that can behave in unique ways. Some modules take notes and produce sound, these are called Synths . Others called Effects take sound and alter it in some way as output. There is also a Misc category for special modules that don't fit the status quo of the other two. You can create new modules using SunVox.new_module , and connect and disconnect them using SunVox.connect_module and SunVox.disconnect_module . You can delete a module using SunVox.remove_module Events sent to modules can change controller values and play notes. Events can be played in a couple of ways. - By SunVox.play , etc. These events are stored in the song's patterns. By Sunvox.send_event which will immediately play an event. By using SunVox.set_event_time to time the event based using the ticks as a timer. Then using Sunvox.send_event to send the event at that time. Creating, connecting, and sending events to a module # send_event takes a slot, track number, note, velocity (how hard the note is played, 0 is hard as possible, 1..127 is soft to hard), module (if left blank no module is specified), controller (if blank no control is specified), and a controller value (doesn't matter if no controller is set.) require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) SunVox . connect_module ( slot , generator , SunVox :: OUTPUT_MODULE ) # Send a note SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) sleep 1 # Send the \"note off\" to the track (0), or else it will keep playing forever SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) # Play multiple notes at the same time up to the modules polyphony limit. A modules polyphony is how many tracks of notes the module can play simultaneously. SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: D5 , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: E5 , 0 , generator ) sleep 1 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: Off , 0 , generator ) # Change a controller's value to make it sound different # Changes the controller(2): waveform, from triangle wave to square wave. SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 2 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) sleep 1 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) Timing events # You can time events using SunVox's built in timing. To do that you can use SunVox.set_event_time to ensure events are played exactly when you want them to! require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) SunVox . connect_module ( slot , generator , SunVox :: OUTPUT_MODULE ) # The current frame SunVox is processing. This helps us time ourselves against SunVox. starting_ticks = SunVox . ticks ticks = starting_ticks tps = SunVox . ticks_per_second # Set event one second from the current tick SunVox . set_event_time ( slot , ticks += tps ) # Send a note SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . set_event_time ( slot , ticks += ( tps / 2 ) . to_i ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) # Keep adding to ticks to time your event for the future. 9 . times do SunVox . set_event_time ( slot , ticks += tps ) SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . set_event_time ( slot , ticks += ( tps / 2 ) . to_i ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) end sleep Getting basic module and controller information # Using SunVox.get_module_name(slot, module_number) we can get the String name of a module. Using SunVox.get_module_ctl_name(slot, module_number, controller_number) we can get the String name of a module. Lists the the modules and controllers in a .sunvox file require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot , \"./rsrc/test.sunvox\" ) SunVox . get_number_of_modules ( slot ) . times do | mod_num | mod_name = SunVox . get_module_name ( slot , mod_num ) # Check to see if the module is actually real mod_exists = SunVox . get_module_flags ( slot , mod_num ) & 1 == 1 if mod_exists puts \"M #{ mod_num } #{ mod_name } \" SunVox . get_number_of_module_ctls ( slot , mod_num ) . times do | ctl_num | ctl_name = SunVox . get_module_ctl_name ( slot , mod_num , ctl_num ) ctl_value = SunVox . get_module_ctl_value ( slot , mod_num , ctl_num ) puts \" C #{ ctl_num } - #{ ctl_name } - #{ ctl_value } \" end puts end end Any module you add/remove will change this list. Getting pattern information/data # .sunvox files can (but don't have to) contain pattern information. This is the list of events for each track. A pattern is a certain size of lines long, you can determine length by SunVox.get_pattern_lines(slot, pattern_num) . You can also get the number of tracks using SunVox.get_pattern_tracks(slot, pattern_num) . You can find what line a pattern starts at (relative to the whole song) by using SunVox..get_pattern_x(slot, pattern_num) . Patterns can also have names. To get a list of all events per track, use SunVox.get_pattern_data(slot, pattern_num) to return an Array(Array(SunVox::Event)) . Each Array(SunVox::Event) is a track. You can use this to peel through the pattern event data youself. require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot , \"./rsrc/trance.sunvox\" ) SunVox . get_number_of_patterns ( slot ) . times do | pat_num | pat_name = SunVox . get_pattern_name ( slot , pat_num ) pat_line_start = SunVox . get_pattern_x ( slot , pat_num ) if SunVox . get_pattern_lines ( slot , pat_num ) > 0 puts \"P #{ pat_num } #{ pat_name } \" SunVox . get_pattern_data ( slot , pat_num ) . each_with_index do | track , track_num | puts \" T #{ track_num } \" track . each_with_index do | event , line_num | if event . note == SunVox :: Note :: None && event . mod_num == SunVox :: NO_MODULE && event . effect == 0 && event . ctl == 0 puts \" L #{ line_num + pat_line_start } - Blank\" else puts \" L #{ line_num + pat_line_start } - N: #{ event . note } | V: #{ event . velocity } | M : #{ event . mod_num } | C: #{ event . ctl } | E: #{ event . effect } | P: #{ event . ctl_value } \" end end end puts end end","title":"Basics"},{"location":"BASICS.html#welcome-to-the-basics","text":"Here you will learn everything I know about SunVox, it's libraries, and all the cool stuff it can do! First of all, if you haven't headed over to warmplace.ru , please give SunVox a look over. The tool is surprisingly simple to use, and can save you a lot of work. Check out it's tutorial for more information. However, you do not have to use the SunVox application at all, which is why this library exists for us to use.","title":"Welcome to the basics!"},{"location":"BASICS.html#a-quick-sunvox-101","text":"This is the quickest dirtiest intro into the realm that is SunVox. SunVox is a modular synthesizer and tracker. What that means is that you can build instruments, and play notes through them. A sunvox file is a whole \"song\". This song is made up of two parts, the \"tracker\" which controls the notes played (essentially) and the modular synth, which uses a series of connected modules to make a instrument. In the tracker, the notes to be played are stored in patterns, which can be easily duplicated and it's position changed. The SunVox library allows you to control all those aspects.","title":"A quick SunVox 101"},{"location":"BASICS.html#install","text":"Run sudo ./install.sh . You may need to install the correct arch library into the correct location.","title":"Install"},{"location":"BASICS.html#basic-setup","text":"require \"libsunvox\" # Starts the SunVox audio engine # Set the audiodevice and audiodevice_in to your devices # Automatically adds an `at_exit` hook to close all the slots that are open, and stop the engine. SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) # Opens a slot for us to use slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) A slot contains a single song or .sunvox file. You can have multiple slots playing multiple songs at the same time. You have a maximum of 16 slots as allowed in SunVox::Slot . You can load any sunvox file into the slot of your choice by using: SunVox . load ( slot , \"./file/some_file.sunvox\" ) You have many easy to use controls for playback control SunVox . play_from_beginning ( slot ) SunVox . play ( slot ) SunVox . pause ( slot ) SunVox . resume ( slot ) SunVox . stop ( slot ) # When used twice stops all sounds completely (Also known as SunVox::Note::CleanSynths) SunVox . skip_to_line ( slot , line_number ) SunVox . set_repeat ( slot , true | false ) SunVox . repeats? ( slot ) # Does the track repeat? SunVox . volume ( slot , 256_u8 ) # Max volume How to play any song. require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot \"./file.sunvox\" ) SunVox . play_from_beginning ( slot ) sleep # Wait forever You can also get the names, and other information for the modules, patterns, and the song in a slot, using methods like SunVox.get_song_tpl or SunVox.get_number_of_patterns . You can also process any event SunVox has to offer. What's an event? It's an instruction executed by SunVox to do either one, some, or all of the following: Play a note on a module, set a controller value on a module, set an effect on a note. Modules are interconnected sound pipelines that alter or produce sound in some way. For example, you could take your microphone input (A SunVox::Modules::Synths::INPUT ) and pipe it into the reverb module ( SunVox::Modules::Effects::REVERB ), then pipe that reverb module to output ( SunVox::OUTPUT_MODULE ). All modules have controllers which control different ways the module behaves. For example, the volume controller controls it's output volume. Each module type has unique controllers that can behave in unique ways. Some modules take notes and produce sound, these are called Synths . Others called Effects take sound and alter it in some way as output. There is also a Misc category for special modules that don't fit the status quo of the other two. You can create new modules using SunVox.new_module , and connect and disconnect them using SunVox.connect_module and SunVox.disconnect_module . You can delete a module using SunVox.remove_module Events sent to modules can change controller values and play notes. Events can be played in a couple of ways. - By SunVox.play , etc. These events are stored in the song's patterns. By Sunvox.send_event which will immediately play an event. By using SunVox.set_event_time to time the event based using the ticks as a timer. Then using Sunvox.send_event to send the event at that time.","title":"Basic setup"},{"location":"BASICS.html#creating-connecting-and-sending-events-to-a-module","text":"send_event takes a slot, track number, note, velocity (how hard the note is played, 0 is hard as possible, 1..127 is soft to hard), module (if left blank no module is specified), controller (if blank no control is specified), and a controller value (doesn't matter if no controller is set.) require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) SunVox . connect_module ( slot , generator , SunVox :: OUTPUT_MODULE ) # Send a note SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) sleep 1 # Send the \"note off\" to the track (0), or else it will keep playing forever SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) # Play multiple notes at the same time up to the modules polyphony limit. A modules polyphony is how many tracks of notes the module can play simultaneously. SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: D5 , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: E5 , 0 , generator ) sleep 1 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: Off , 0 , generator ) # Change a controller's value to make it sound different # Changes the controller(2): waveform, from triangle wave to square wave. SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 2 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) sleep 1 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator )","title":"Creating, connecting, and sending events to a module"},{"location":"BASICS.html#timing-events","text":"You can time events using SunVox's built in timing. To do that you can use SunVox.set_event_time to ensure events are played exactly when you want them to! require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) SunVox . connect_module ( slot , generator , SunVox :: OUTPUT_MODULE ) # The current frame SunVox is processing. This helps us time ourselves against SunVox. starting_ticks = SunVox . ticks ticks = starting_ticks tps = SunVox . ticks_per_second # Set event one second from the current tick SunVox . set_event_time ( slot , ticks += tps ) # Send a note SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . set_event_time ( slot , ticks += ( tps / 2 ) . to_i ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) # Keep adding to ticks to time your event for the future. 9 . times do SunVox . set_event_time ( slot , ticks += tps ) SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , generator ) SunVox . set_event_time ( slot , ticks += ( tps / 2 ) . to_i ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) end sleep","title":"Timing events"},{"location":"BASICS.html#getting-basic-module-and-controller-information","text":"Using SunVox.get_module_name(slot, module_number) we can get the String name of a module. Using SunVox.get_module_ctl_name(slot, module_number, controller_number) we can get the String name of a module. Lists the the modules and controllers in a .sunvox file require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot , \"./rsrc/test.sunvox\" ) SunVox . get_number_of_modules ( slot ) . times do | mod_num | mod_name = SunVox . get_module_name ( slot , mod_num ) # Check to see if the module is actually real mod_exists = SunVox . get_module_flags ( slot , mod_num ) & 1 == 1 if mod_exists puts \"M #{ mod_num } #{ mod_name } \" SunVox . get_number_of_module_ctls ( slot , mod_num ) . times do | ctl_num | ctl_name = SunVox . get_module_ctl_name ( slot , mod_num , ctl_num ) ctl_value = SunVox . get_module_ctl_value ( slot , mod_num , ctl_num ) puts \" C #{ ctl_num } - #{ ctl_name } - #{ ctl_value } \" end puts end end Any module you add/remove will change this list.","title":"Getting basic module and controller information"},{"location":"BASICS.html#getting-pattern-informationdata","text":".sunvox files can (but don't have to) contain pattern information. This is the list of events for each track. A pattern is a certain size of lines long, you can determine length by SunVox.get_pattern_lines(slot, pattern_num) . You can also get the number of tracks using SunVox.get_pattern_tracks(slot, pattern_num) . You can find what line a pattern starts at (relative to the whole song) by using SunVox..get_pattern_x(slot, pattern_num) . Patterns can also have names. To get a list of all events per track, use SunVox.get_pattern_data(slot, pattern_num) to return an Array(Array(SunVox::Event)) . Each Array(SunVox::Event) is a track. You can use this to peel through the pattern event data youself. require \"libsunvox\" SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot , \"./rsrc/trance.sunvox\" ) SunVox . get_number_of_patterns ( slot ) . times do | pat_num | pat_name = SunVox . get_pattern_name ( slot , pat_num ) pat_line_start = SunVox . get_pattern_x ( slot , pat_num ) if SunVox . get_pattern_lines ( slot , pat_num ) > 0 puts \"P #{ pat_num } #{ pat_name } \" SunVox . get_pattern_data ( slot , pat_num ) . each_with_index do | track , track_num | puts \" T #{ track_num } \" track . each_with_index do | event , line_num | if event . note == SunVox :: Note :: None && event . mod_num == SunVox :: NO_MODULE && event . effect == 0 && event . ctl == 0 puts \" L #{ line_num + pat_line_start } - Blank\" else puts \" L #{ line_num + pat_line_start } - N: #{ event . note } | V: #{ event . velocity } | M : #{ event . mod_num } | C: #{ event . ctl } | E: #{ event . effect } | P: #{ event . ctl_value } \" end end end puts end end","title":"Getting pattern information/data"},{"location":"EXAMPLES.html","text":"How to time events using set_event_time require \"libsunvox\" SunVox . start_engine ( no_debug_output : true , one_thread : true ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) fm_synth_number = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: FM ) # Connect the module to the output SunVox . connect_module ( slot , fm_synth_number , SunVox :: OUTPUT_MODULE ) puts \"Sending Events\" tps = SunVox . ticks_per_second ticks = SunVox . ticks + tps # Send events 10 . times do 20 . times do | x | SunVox . set_event_time ( slot , ticks += ( tps * 0.25 ) . to_i ) SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 + x , 0 , fm_synth_number ) end SunVox . set_event_time ( slot , ticks += tps ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 128 , fm_synth_number ) end Playing Scales require \"libsunvox\" SunVox . start_engine ( no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) fm_synth_number = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) # Connect the module to the output SunVox . connect_module ( slot , fm_synth_number , SunVox :: OUTPUT_MODULE ) scale = SunVox :: Scales . make ( SunVox :: Note :: C3 , SunVox :: Scales :: HEXATONIC ) pp scale tps = SunVox . ticks_per_second starting_ticks = SunVox . ticks ticks = starting_ticks # Send events 10 . times do scale . each do | note | SunVox . set_event_time ( slot , ticks += ( tps * 0.25 ) . to_i ) SunVox . send_event ( slot , 0 , note , 0 , fm_synth_number ) end SunVox . set_event_time ( slot , ticks += tps ) SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , fm_synth_number ) end sleep Simple Instrument require \"libsunvox\" SunVox . start_engine ( no_debug_output : true , one_thread : true ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) generator_number = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) reverb_number = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: REVERB ) # Connect the module to the output SunVox . connect_module ( slot , generator_number , reverb_number ) SunVox . connect_module ( slot , reverb_number , SunVox :: OUTPUT_MODULE ) # Set up the sound settings # Change waveform to noise SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator_number , ctl : 2 , ctl_value : 0 ) 100 . times do attack_low = 0xb80 attack_high = 0x1540 release_low = 0x31c0 release_high = 0x6000 attack = Random . rand ( attack_low .. attack_high ) release = Random . rand ( release_low .. release_high ) note = Random . rand ( SunVox :: Note :: C2 . to_i .. SunVox :: Note :: C4 . to_i ) # Change Attack SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator_number , ctl : 4 , ctl_value : attack ) # Change Release SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator_number , ctl : 5 , ctl_value : release ) # Send a note SunVox . send_event ( slot , 0 , note , 0 , generator_number ) sleep 0.3 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator_number ) sleep 3 end sleep Bad Generative Music Example require \"libsunvox\" SunVox . start_engine ( config : \"audiodevice=hw:0,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) reverb = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: REVERB ) drum_synth = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: DRUM_SYNTH ) # Connect the module to the output SunVox . connect_module ( slot , generator , reverb ) SunVox . connect_module ( slot , reverb , SunVox :: OUTPUT_MODULE ) SunVox . connect_module ( slot , drum_synth , reverb ) # Set up the sound settings # Change waveform to noise SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 0 ) # Change Attack and release SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 4 , ctl_value : 0x1000 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 5 , ctl_value : 0x1000 ) spawn do 1_000_000 . times do | x | if x % 2 == 0 SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , drum_synth ) sleep 0.25 SunVox . send_event ( slot , 0 , SunVox :: Note :: C5 , 0 , drum_synth ) sleep 0.25 else SunVox . send_event ( slot , 0 , SunVox :: Note :: D5 , 0 , drum_synth ) sleep 0.5 end 2 . times do SunVox . send_event ( slot , 0 , SunVox :: Note :: FSharp1 , 0 , drum_synth ) sleep 0.5 end SunVox . send_event ( slot , 0 , SunVox :: Note :: FSharp1 , 0 , drum_synth ) sleep 0.25 SunVox . send_event ( slot , 0 , SunVox :: Note :: FSharp1 , 0 , drum_synth ) sleep 0.25 end end spawn do scale = SunVox :: Scales . make ( SunVox :: Note :: F3 , SunVox :: Scales :: MINOR_HEXATONIC ) scale_size = scale . size scale = scale + SunVox :: Scales . make ( SunVox :: Note :: F4 , SunVox :: Scales :: MINOR_HEXATONIC ) 1_000_000 . times do 3 . times do note = rand ( scale_size ) SunVox . send_event ( slot , 0 , scale [ note ] , 0 , generator ) sleep 0.25 / 2 SunVox . send_event ( slot , 1 , scale [ note + 2 ] , 0 , generator ) sleep 0.25 / 2 SunVox . send_event ( slot , 2 , scale [ note + 4 ] , 0 , generator ) sleep 0.75 SunVox . send_event ( slot , 0 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: Off , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: Off , 0 , generator ) sleep 1 end note = rand ( scale_size ) SunVox . send_event ( slot , 3 , scale [ note ] , 0 , generator ) sleep 1 SunVox . send_event ( slot , 3 , SunVox :: Note :: Off , 0 , generator ) sleep 1 end end sleep Make a live vocoder - https://youtu.be/PoH34XjlLLE require \"libsunvox\" # Set the audiodevice and audiodevice_in to your device then speak into your microphone :) SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) slot = SunVox . open_slot ( SunVox :: Slot :: One ) input = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: INPUT ) generator = SunVox . new_module ( slot , SunVox :: Modules :: Synths :: GENERATOR ) carrier = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) modulator = SunVox . new_module ( slot , SunVox :: Modules :: Effects :: AMPLIFIER ) vocoder = SunVox . load_module ( slot , \"./rsrc/vocoder.sunsynth\" ) # Connect the module to the output SunVox . connect_module ( slot , input , modulator ) SunVox . connect_module ( slot , generator , carrier ) SunVox . connect_module ( slot , carrier , vocoder ) SunVox . connect_module ( slot , modulator , vocoder ) SunVox . connect_module ( slot , vocoder , SunVox :: OUTPUT_MODULE ) SunVox . update_input SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , generator , ctl : 2 , ctl_value : 0x1 ) # Set carrier controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 1 , ctl_value : 0x4000 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , carrier , ctl : 2 , ctl_value : 0x8000 ) # Set modulator controls SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 1 , ctl_value : 0x69c0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: None , 0 , modulator , ctl : 2 , ctl_value : 0 ) SunVox . send_event ( slot , 0 , SunVox :: Note :: D1 , 0 , generator ) SunVox . send_event ( slot , 1 , SunVox :: Note :: D2 , 0 , generator ) SunVox . send_event ( slot , 2 , SunVox :: Note :: D3 , 0 , generator ) SunVox . send_event ( slot , 3 , SunVox :: Note :: G4 , 0 , generator ) SunVox . send_event ( slot , 4 , SunVox :: Note :: D5 , 0 , generator ) sleep Live monitor output levels require \"crysterm\" # github: crystallabs/crysterm require \"libsunvox\" include Crysterm COLORS = [ 10 , 11 , 9 ] SunVox . start_engine ( config : \"audiodriver=alsa|audiodevice=hw:0,0|audiodevice_in=hw:2,0\" , no_debug_output : true , one_thread : false ) # Opens a slot for us to use slot = SunVox . open_slot ( SunVox :: Slot :: Zero ) SunVox . load ( slot , \"./rsrc/song.sunvox\" ) SunVox . play_from_beginning ( slot ) def draw ( s : Screen , x , y , fg = 0 , bg = 0 , char = ' ' ) s . fill_region ( Widget . sattr ( Namespace :: Style . new , fg , bg ), char , x , x + 1 , y , y + 1 ) end def draw_region ( s : Screen , x1 , y1 , x2 , y2 , fg = 0 , bg = 0 , char = ' ' ) s . fill_region ( Widget . sattr ( Namespace :: Style . new , fg , bg ), char , x1 , x2 , y1 , y2 ) end def clear ( s : Screen ) draw_region ( s , 0 , 0 , s . width , s . height ) end def draw_frame ( s ) output_level = ( SunVox . get_current_signal_level ( SunVox :: Slot :: Zero , 0 ) / 100.0 ) . clamp ( 0 , 0.9 ) output_color = COLORS [ ( COLORS . size * output_level ) . to_i ] draw_region ( s , 0 , 5 , ( s . width * output_level ) . to_i , 10 , bg : output_color ) output_level = ( SunVox . get_current_signal_level ( SunVox :: Slot :: Zero , 1 ) / 100.0 ) . clamp ( 0 , 0.9 ) output_color = COLORS [ ( COLORS . size * output_level ) . to_i ] draw_region ( s , 0 , 12 , ( s . width * output_level ) . to_i , 17 , bg : output_color - 8 ) end # `Display` is a phyiscal device (terminal hardware or emulator). # It can be instantiated manually as shown, or for quick coding it can be # skipped and it will be created automatically when needed. d = Display . new # `Screen` is a full-screen surface which contains visual elements (Widgets), # on which graphics is rendered, and which is then drawn onto the terminal. # An app can have multiple screens, but only one can be showing at a time. s = Screen . new display : d # When q is pressed, exit the demo. s . on ( Event :: KeyPress ) do | e | if e . char == 'q' exit end end spawn do loop do sleep 0.1 clear ( s ) draw_frame ( s ) s . render end end d . exec","title":"Examples"},{"location":"SUMMARY.html","text":"Usage Basics Examples API Event ModuleType Modules Effects Misc Synths Note SampleType Scale Scales Slot","title":"SUMMARY"},{"location":"SunVox.html","text":"module SunVox # Constants # CURRENT_VERSION_MAJOR = 1 # CURRENT_VERSION_MINOR = 9 # CURRENT_VERSION_MINOR2 = 6 # DEFAULT_CHANNELS = 2 # DEFAULT_CONFIG = \"\" # DEFAULT_FREQ = 44100 # MAX_SLOTS = 16 # NO_MODULE = - 1 # OUTPUT_MODULE = 0 # Class methods # .close_slot ( slot : Slot ) # Closes a slot. Raises exception if the slot is closed or something goes wrong. .connect_module ( slot : Slot , src , dest ) # Connect a module src to a module dest . .disconnect_module ( slot : Slot , src , dest ) # Disconnect a module src from a module dest . .end_of_song? ( slot : Slot ) : Bool # Is the song over and the end has been reached? .find_module ( slot : Slot , name ) # Find a module in a slot by name .find_pattern ( slot : Slot , name ) # Finds the pattern in slot by name .frequency_to_pitch ( in_freq ) # .get_current_line ( slot : Slot ) # The current line the playhead is at .get_current_line2 ( slot : Slot ) # THe current line the play head is at in a fractional form (not sure how this works) https://warmplace.ru/soft/sunvox/sunvox_lib.php#sv_get_current_line2 .get_current_signal_level ( slot : Slot , channel ) # Gets the current output signal level .get_log ( bytes : Int32 ) # Gets the debug log messages .get_module_color ( slot : Slot , module_num ) # Get the color of a module in 0xBBGGRR format. .get_module_ctl_name ( slot : Slot , module_num , ctl_num ) # Get the name of a module's controller. .get_module_ctl_value ( slot : Slot , module_num , ctl_num , scaled = false ) # Get the value of a modules controller. .get_module_curve ( slot : Slot , module_num , curve_num , length ) # Get the curve from a module .get_module_finetune ( slot : Slot , module_num ) # Get module's finetune values. .get_module_flags ( slot : Slot , module_num ) # Get the flags set on a module .get_module_inputs ( slot : Slot , module_num ) # A list of all the inputs a module has. .get_module_inputs_number ( slot : Slot , module_num ) # The number of module inputs. .get_module_name ( slot : Slot , name ) # Gets the name of a module. .get_module_outputs ( slot : Slot , module_num ) # A list of all the outputs a module has. .get_module_outputs_number ( slot : Slot , module_num ) # The number of module outputs. .get_module_scope ( slot : Slot , module_num , channel , samples_to_read ) # Get the raw audio output values for a module. .get_module_xy ( slot : Slot , module_num ) # Get the x, y positon of a module. .get_number_of_module_ctls ( slot : Slot , module_num ) # Get the number of controllers a module has. .get_number_of_modules ( slot : Slot ) # The number of modules in slot .get_number_of_patterns ( slot : Slot ) # Gets the number of patterns in a slot .get_pattern_data ( slot : Slot , pattern_num ) # Get the event data, seperated by tracks. .get_pattern_lines ( slot : Slot , pattern_num ) # Gets the number of lines in a pattern .get_pattern_name ( slot : Slot , pattern_num ) # Gets the pattern's name .get_pattern_tracks ( slot : Slot , pattern_num ) # Get the number of track in the pattern. .get_pattern_x ( slot : Slot , pat_num ) # Gets the pattern's starting line. .get_pattern_y ( slot : Slot , pat_num ) # Gets the pattern's height. .get_song_bpm ( slot : Slot ) # Gets the BPM of the song in slot .get_song_length ( slot : Slot ) # Get the length of the song in seconds .get_song_length_frames ( slot : Slot ) # The total length in ticks of the song in slot s. .get_song_length_lines ( slot : Slot ) # The total song length in lines of slot . .get_song_name ( slot : Slot ) # Gets the name of the song in slot .get_song_tpl ( slot : Slot ) # Number of lines executed in a second in the song. .load ( slot : Slot , filename ) # Loads a filename into a slot. .load_module ( slot : Slot , filename , x = 0 , y = 0 , z = 0 ) # Load a module from a file. File can be sunsynth, xi, wav, or aiff. .module_bypass? ( slot : Slot , module_num ) # .module_effect? ( slot : Slot , module_num ) # .module_exists? ( slot : Slot , module_num ) # .module_mute? ( slot : Slot , module_num ) # .module_solo? ( slot : Slot , module_num ) # .new_module ( slot : Slot , type : ModuleType , name = \"\" , x = 0 , y = 0 , z = 0 ) # Create a new module in slot . Returns the number of the new module. .open_slot ( slot : Slot ) # Opens a slot .pattern_mute ( slot : Slot , pattern_num , mute = true ) # Mute/Unmute the pattern. .pause ( slot : Slot ) # Pauses the playback at the current line. .pitch_to_frequency ( in_pitch ) # .play ( slot : Slot ) # Plays the current song from the current line. .play_from_beginning ( slot : Slot ) # Plays the current song from the beginning. .remove_module ( slot : Slot , module_num ) # Remove the module module_num in slot . .repeats? ( slot : Slot ) : Bool # Returns whether or not a song will repeat when the end is reached. .resume ( slot : Slot ) # Resumes playback from a paused state. .sample_rate # .sampler_load ( slot : Slot , sampler_module_num , filename , sample_slot = - 1 ) # Loads a file into a sampler. File must be xi, wav, or aiff. .send_event ( slot : Slot , track_num , note : Int32 , velocity , module_num = - 1 , ctl = 0 , effect = 0 , ctl_value = 0 ) # Sends an event to SunVox. Can be used to send notes, change ctl values, or set note effects. A module_num of 0 causes no effect, so any module you would like to actually use must have 1 added to it .send_event ( slot : Slot , track_num , event : Event ) # Sends an event to SunVox. Can be used to send notes, change ctl values, or set note effects. A module_num of 0 causes no effect, so any module you would like to actually use must have 1 added to it .send_event ( slot : Slot , track_num , note : Note , velocity , module_num = - 1 , ctl = 0 , effect = 0 , ctl_value = 0 ) # Sends an event to SunVox. Can be used to send notes, change ctl values, or set note effects. A module_num of 0 causes no effect, so any module you would like to actually use must have 1 added to it .set_event_time ( slot : Slot , timestamp : UInt32 = 0 _u32 , set = true ) # Changes how SunVox processes send_event . Instead of playing the event as soon as it's called, this allows send_event to be delayed by a number of ticks. When setting set to false it will reset the timing method back to immediate. When used timestamp should generally be SunVox.ticks + (SunVox.ticks_per_second/1000 * delay_milliseconds) .set_module_curve ( slot : Slot , module_num , curve_num , curve_data : Slice ( Float32 )) # Set the curve data of a module .set_repeat ( slot : Slot , bool ) : Nil # Sets whether or not a song will repeat when the end is reached. .skip_to_line ( slot : Slot , line_num : Int32 ) # Jumps the current position of the playhead to a line number. .start_engine ( config = DEFAULT_CONFIG , freq = DEFAULT_FREQ , channels = DEFAULT_CHANNELS , no_debug_output = false , offline = false , sample_type = SampleType :: Int16 , one_thread = false ) # Starts up the SunVox Engine. Hooks at_exit to ensure stop_engine is run on close .started? # .stop ( slot : Slot ) # Stops the current song from playing. 2 calls will stop all the synths and sounds. .stop_engine # Shuts down the engine. .ticks : UInt32 # The current tick .ticks_per_second : UInt32 # How many ticks happen per second .time_map ( slot : Slot , start_line , len , flags = 0 ) # Honestly, no idea how this one works. Seems like it should be useful if someone who isn't me wants to figure it out lol: https://warmplace.ru/soft/sunvox/sunvox_lib.php#sv_get_time_map Good Luck! .update_input # .volume ( slot : Slot , volume : UInt8 ) # Sets the output volume of the slot.","title":"API"},{"location":"SunVox.html#SunVox","text":"","title":"SunVox"},{"location":"SunVox.html#SunVox-constants","text":"","title":"Constants"},{"location":"SunVox.html#SunVox::CURRENT_VERSION_MAJOR","text":"","title":"CURRENT_VERSION_MAJOR"},{"location":"SunVox.html#SunVox::CURRENT_VERSION_MINOR","text":"","title":"CURRENT_VERSION_MINOR"},{"location":"SunVox.html#SunVox::CURRENT_VERSION_MINOR2","text":"","title":"CURRENT_VERSION_MINOR2"},{"location":"SunVox.html#SunVox::DEFAULT_CHANNELS","text":"","title":"DEFAULT_CHANNELS"},{"location":"SunVox.html#SunVox::DEFAULT_CONFIG","text":"","title":"DEFAULT_CONFIG"},{"location":"SunVox.html#SunVox::DEFAULT_FREQ","text":"","title":"DEFAULT_FREQ"},{"location":"SunVox.html#SunVox::MAX_SLOTS","text":"","title":"MAX_SLOTS"},{"location":"SunVox.html#SunVox::NO_MODULE","text":"","title":"NO_MODULE"},{"location":"SunVox.html#SunVox::OUTPUT_MODULE","text":"","title":"OUTPUT_MODULE"},{"location":"SunVox.html#SunVox-class-methods","text":"","title":"Class methods"},{"location":"SunVox.html#SunVox.close_slot(slot)","text":"Closes a slot. Raises exception if the slot is closed or something goes wrong.","title":".close_slot"},{"location":"SunVox.html#SunVox.connect_module(slot,src,dest)","text":"Connect a module src to a module dest .","title":".connect_module"},{"location":"SunVox.html#SunVox.disconnect_module(slot,src,dest)","text":"Disconnect a module src from a module dest .","title":".disconnect_module"},{"location":"SunVox.html#SunVox.end_of_song?(slot)","text":"Is the song over and the end has been reached?","title":".end_of_song?"},{"location":"SunVox.html#SunVox.find_module(slot,name)","text":"Find a module in a slot by name","title":".find_module"},{"location":"SunVox.html#SunVox.find_pattern(slot,name)","text":"Finds the pattern in slot by name","title":".find_pattern"},{"location":"SunVox.html#SunVox.frequency_to_pitch(in_freq)","text":"","title":".frequency_to_pitch"},{"location":"SunVox.html#SunVox.get_current_line(slot)","text":"The current line the playhead is at","title":".get_current_line"},{"location":"SunVox.html#SunVox.get_current_line2(slot)","text":"THe current line the play head is at in a fractional form (not sure how this works) https://warmplace.ru/soft/sunvox/sunvox_lib.php#sv_get_current_line2","title":".get_current_line2"},{"location":"SunVox.html#SunVox.get_current_signal_level(slot,channel)","text":"Gets the current output signal level","title":".get_current_signal_level"},{"location":"SunVox.html#SunVox.get_log(bytes)","text":"Gets the debug log messages","title":".get_log"},{"location":"SunVox.html#SunVox.get_module_color(slot,module_num)","text":"Get the color of a module in 0xBBGGRR format.","title":".get_module_color"},{"location":"SunVox.html#SunVox.get_module_ctl_name(slot,module_num,ctl_num)","text":"Get the name of a module's controller.","title":".get_module_ctl_name"},{"location":"SunVox.html#SunVox.get_module_ctl_value(slot,module_num,ctl_num,scaled)","text":"Get the value of a modules controller.","title":".get_module_ctl_value"},{"location":"SunVox.html#SunVox.get_module_curve(slot,module_num,curve_num,length)","text":"Get the curve from a module","title":".get_module_curve"},{"location":"SunVox.html#SunVox.get_module_finetune(slot,module_num)","text":"Get module's finetune values.","title":".get_module_finetune"},{"location":"SunVox.html#SunVox.get_module_flags(slot,module_num)","text":"Get the flags set on a module","title":".get_module_flags"},{"location":"SunVox.html#SunVox.get_module_inputs(slot,module_num)","text":"A list of all the inputs a module has.","title":".get_module_inputs"},{"location":"SunVox.html#SunVox.get_module_inputs_number(slot,module_num)","text":"The number of module inputs.","title":".get_module_inputs_number"},{"location":"SunVox.html#SunVox.get_module_name(slot,name)","text":"Gets the name of a module.","title":".get_module_name"},{"location":"SunVox.html#SunVox.get_module_outputs(slot,module_num)","text":"A list of all the outputs a module has.","title":".get_module_outputs"},{"location":"SunVox.html#SunVox.get_module_outputs_number(slot,module_num)","text":"The number of module outputs.","title":".get_module_outputs_number"},{"location":"SunVox.html#SunVox.get_module_scope(slot,module_num,channel,samples_to_read)","text":"Get the raw audio output values for a module.","title":".get_module_scope"},{"location":"SunVox.html#SunVox.get_module_xy(slot,module_num)","text":"Get the x, y positon of a module.","title":".get_module_xy"},{"location":"SunVox.html#SunVox.get_number_of_module_ctls(slot,module_num)","text":"Get the number of controllers a module has.","title":".get_number_of_module_ctls"},{"location":"SunVox.html#SunVox.get_number_of_modules(slot)","text":"The number of modules in slot","title":".get_number_of_modules"},{"location":"SunVox.html#SunVox.get_number_of_patterns(slot)","text":"Gets the number of patterns in a slot","title":".get_number_of_patterns"},{"location":"SunVox.html#SunVox.get_pattern_data(slot,pattern_num)","text":"Get the event data, seperated by tracks.","title":".get_pattern_data"},{"location":"SunVox.html#SunVox.get_pattern_lines(slot,pattern_num)","text":"Gets the number of lines in a pattern","title":".get_pattern_lines"},{"location":"SunVox.html#SunVox.get_pattern_name(slot,pattern_num)","text":"Gets the pattern's name","title":".get_pattern_name"},{"location":"SunVox.html#SunVox.get_pattern_tracks(slot,pattern_num)","text":"Get the number of track in the pattern.","title":".get_pattern_tracks"},{"location":"SunVox.html#SunVox.get_pattern_x(slot,pat_num)","text":"Gets the pattern's starting line.","title":".get_pattern_x"},{"location":"SunVox.html#SunVox.get_pattern_y(slot,pat_num)","text":"Gets the pattern's height.","title":".get_pattern_y"},{"location":"SunVox.html#SunVox.get_song_bpm(slot)","text":"Gets the BPM of the song in slot","title":".get_song_bpm"},{"location":"SunVox.html#SunVox.get_song_length(slot)","text":"Get the length of the song in seconds","title":".get_song_length"},{"location":"SunVox.html#SunVox.get_song_length_frames(slot)","text":"The total length in ticks of the song in slot s.","title":".get_song_length_frames"},{"location":"SunVox.html#SunVox.get_song_length_lines(slot)","text":"The total song length in lines of slot .","title":".get_song_length_lines"},{"location":"SunVox.html#SunVox.get_song_name(slot)","text":"Gets the name of the song in slot","title":".get_song_name"},{"location":"SunVox.html#SunVox.get_song_tpl(slot)","text":"Number of lines executed in a second in the song.","title":".get_song_tpl"},{"location":"SunVox.html#SunVox.load(slot,filename)","text":"Loads a filename into a slot.","title":".load"},{"location":"SunVox.html#SunVox.load_module(slot,filename,x,y,z)","text":"Load a module from a file. File can be sunsynth, xi, wav, or aiff.","title":".load_module"},{"location":"SunVox.html#SunVox.module_bypass?(slot,module_num)","text":"","title":".module_bypass?"},{"location":"SunVox.html#SunVox.module_effect?(slot,module_num)","text":"","title":".module_effect?"},{"location":"SunVox.html#SunVox.module_exists?(slot,module_num)","text":"","title":".module_exists?"},{"location":"SunVox.html#SunVox.module_mute?(slot,module_num)","text":"","title":".module_mute?"},{"location":"SunVox.html#SunVox.module_solo?(slot,module_num)","text":"","title":".module_solo?"},{"location":"SunVox.html#SunVox.new_module(slot,type,name,x,y,z)","text":"Create a new module in slot . Returns the number of the new module.","title":".new_module"},{"location":"SunVox.html#SunVox.open_slot(slot)","text":"Opens a slot","title":".open_slot"},{"location":"SunVox.html#SunVox.pattern_mute(slot,pattern_num,mute)","text":"Mute/Unmute the pattern.","title":".pattern_mute"},{"location":"SunVox.html#SunVox.pause(slot)","text":"Pauses the playback at the current line.","title":".pause"},{"location":"SunVox.html#SunVox.pitch_to_frequency(in_pitch)","text":"","title":".pitch_to_frequency"},{"location":"SunVox.html#SunVox.play(slot)","text":"Plays the current song from the current line.","title":".play"},{"location":"SunVox.html#SunVox.play_from_beginning(slot)","text":"Plays the current song from the beginning.","title":".play_from_beginning"},{"location":"SunVox.html#SunVox.remove_module(slot,module_num)","text":"Remove the module module_num in slot .","title":".remove_module"},{"location":"SunVox.html#SunVox.repeats?(slot)","text":"Returns whether or not a song will repeat when the end is reached.","title":".repeats?"},{"location":"SunVox.html#SunVox.resume(slot)","text":"Resumes playback from a paused state.","title":".resume"},{"location":"SunVox.html#SunVox.sample_rate","text":"","title":".sample_rate"},{"location":"SunVox.html#SunVox.sampler_load(slot,sampler_module_num,filename,sample_slot)","text":"Loads a file into a sampler. File must be xi, wav, or aiff.","title":".sampler_load"},{"location":"SunVox.html#SunVox.send_event(slot,track_num,note,velocity,module_num,ctl,effect,ctl_value)","text":"Sends an event to SunVox. Can be used to send notes, change ctl values, or set note effects. A module_num of 0 causes no effect, so any module you would like to actually use must have 1 added to it","title":".send_event"},{"location":"SunVox.html#SunVox.send_event(slot,track_num,note,velocity,module_num,ctl,effect,ctl_value)","text":"Sends an event to SunVox. Can be used to send notes, change ctl values, or set note effects. A module_num of 0 causes no effect, so any module you would like to actually use must have 1 added to it","title":".send_event"},{"location":"SunVox.html#SunVox.set_event_time(slot,timestamp,set)","text":"Changes how SunVox processes send_event . Instead of playing the event as soon as it's called, this allows send_event to be delayed by a number of ticks. When setting set to false it will reset the timing method back to immediate. When used timestamp should generally be SunVox.ticks + (SunVox.ticks_per_second/1000 * delay_milliseconds)","title":".set_event_time"},{"location":"SunVox.html#SunVox.set_module_curve(slot,module_num,curve_num,curve_data)","text":"Set the curve data of a module","title":".set_module_curve"},{"location":"SunVox.html#SunVox.set_repeat(slot,bool)","text":"Sets whether or not a song will repeat when the end is reached.","title":".set_repeat"},{"location":"SunVox.html#SunVox.skip_to_line(slot,line_num)","text":"Jumps the current position of the playhead to a line number.","title":".skip_to_line"},{"location":"SunVox.html#SunVox.start_engine(config,freq,channels,no_debug_output,offline,sample_type,one_thread)","text":"Starts up the SunVox Engine. Hooks at_exit to ensure stop_engine is run on close","title":".start_engine"},{"location":"SunVox.html#SunVox.started?","text":"","title":".started?"},{"location":"SunVox.html#SunVox.stop(slot)","text":"Stops the current song from playing. 2 calls will stop all the synths and sounds.","title":".stop"},{"location":"SunVox.html#SunVox.stop_engine","text":"Shuts down the engine.","title":".stop_engine"},{"location":"SunVox.html#SunVox.ticks","text":"The current tick","title":".ticks"},{"location":"SunVox.html#SunVox.ticks_per_second","text":"How many ticks happen per second","title":".ticks_per_second"},{"location":"SunVox.html#SunVox.time_map(slot,start_line,len,flags)","text":"Honestly, no idea how this one works. Seems like it should be useful if someone who isn't me wants to figure it out lol: https://warmplace.ru/soft/sunvox/sunvox_lib.php#sv_get_time_map Good Luck!","title":".time_map"},{"location":"SunVox.html#SunVox.update_input","text":"","title":".update_input"},{"location":"SunVox.html#SunVox.volume(slot,volume)","text":"Sets the output volume of the slot.","title":".volume"},{"location":"SunVox/Event.html","text":"struct SunVox::Event inherits Struct # Class methods # .new ( note : SunVox::Note , velocity : UInt8 , mod_num : Int16 , ctl : UInt8 , effect : UInt8 , ctl_value : UInt16 ) # Methods # #clone # #copy_with ( note _note = @note , velocity _velocity = @velocity , mod_num _mod_num = @mod_num , ctl _ctl = @ctl , effect _effect = @effect , ctl_value _ctl_value = @ctl_value ) # #ctl : UInt8 # #ctl_value : UInt16 # #effect : UInt8 # #mod_num : Int16 # #note : SunVox::Note # #velocity : UInt8 #","title":"Event"},{"location":"SunVox/Event.html#SunVox::Event","text":"","title":"Event"},{"location":"SunVox/Event.html#SunVox::Event-class-methods","text":"","title":"Class methods"},{"location":"SunVox/Event.html#SunVox::Event.new(note,velocity,mod_num,ctl,effect,ctl_value)","text":"","title":".new"},{"location":"SunVox/Event.html#SunVox::Event-methods","text":"","title":"Methods"},{"location":"SunVox/Event.html#SunVox::Event#clone","text":"","title":"#clone"},{"location":"SunVox/Event.html#SunVox::Event#copy_with(note,velocity,mod_num,ctl,effect,ctl_value)","text":"","title":"#copy_with"},{"location":"SunVox/Event.html#SunVox::Event#ctl","text":"","title":"#ctl"},{"location":"SunVox/Event.html#SunVox::Event#ctl_value","text":"","title":"#ctl_value"},{"location":"SunVox/Event.html#SunVox::Event#effect","text":"","title":"#effect"},{"location":"SunVox/Event.html#SunVox::Event#mod_num","text":"","title":"#mod_num"},{"location":"SunVox/Event.html#SunVox::Event#note","text":"","title":"#note"},{"location":"SunVox/Event.html#SunVox::Event#velocity","text":"","title":"#velocity"},{"location":"SunVox/ModuleType.html","text":"class SunVox::ModuleType inherits Reference # Class methods # .new ( type ) # Methods # #type : String #","title":"ModuleType"},{"location":"SunVox/ModuleType.html#SunVox::ModuleType","text":"","title":"ModuleType"},{"location":"SunVox/ModuleType.html#SunVox::ModuleType-class-methods","text":"","title":"Class methods"},{"location":"SunVox/ModuleType.html#SunVox::ModuleType.new(type)","text":"","title":".new"},{"location":"SunVox/ModuleType.html#SunVox::ModuleType-methods","text":"","title":"Methods"},{"location":"SunVox/ModuleType.html#SunVox::ModuleType#type","text":"","title":"#type"},{"location":"SunVox/Modules.html","text":"module SunVox::Modules # A module that holds all the different module types, categorized as they are in the SunVox application.","title":"Modules"},{"location":"SunVox/Modules.html#SunVox::Modules","text":"A module that holds all the different module types, categorized as they are in the SunVox application.","title":"Modules"},{"location":"SunVox/Note.html","text":"enum SunVox::Note # Members # None = 0 # C0 = 1 # CSharp0 = 2 # DFlat0 = 2 # D0 = 3 # DSharp0 = 4 # EFlat0 = 4 # E0 = 5 # F0 = 6 # FSharp0 = 7 # GFlat0 = 7 # G0 = 8 # GSharp0 = 9 # AFlat0 = 9 # A0 = 10 # ASharp0 = 11 # BFlat0 = 11 # B0 = 12 # C1 = 13 # CSharp1 = 14 # DFlat1 = 14 # D1 = 15 # DSharp1 = 16 # EFlat1 = 16 # E1 = 17 # F1 = 18 # FSharp1 = 19 # GFlat1 = 19 # G1 = 20 # GSharp1 = 21 # AFlat1 = 21 # A1 = 22 # ASharp1 = 23 # BFlat1 = 23 # B1 = 24 # C2 = 25 # CSharp2 = 26 # DFlat2 = 26 # D2 = 27 # DSharp2 = 28 # EFlat2 = 28 # E2 = 29 # F2 = 30 # FSharp2 = 31 # GFlat2 = 31 # G2 = 32 # GSharp2 = 33 # AFlat2 = 33 # A2 = 34 # ASharp2 = 35 # BFlat2 = 35 # B2 = 36 # C3 = 37 # CSharp3 = 38 # DFlat3 = 38 # D3 = 39 # DSharp3 = 40 # EFlat3 = 40 # E3 = 41 # F3 = 42 # FSharp3 = 43 # GFlat3 = 43 # G3 = 44 # GSharp3 = 45 # AFlat3 = 45 # A3 = 46 # ASharp3 = 47 # BFlat3 = 47 # B3 = 48 # C4 = 49 # CSharp4 = 50 # DFlat4 = 50 # D4 = 51 # DSharp4 = 52 # EFlat4 = 52 # E4 = 53 # F4 = 54 # FSharp4 = 55 # GFlat4 = 55 # G4 = 56 # GSharp4 = 57 # AFlat4 = 57 # A4 = 58 # ASharp4 = 59 # BFlat4 = 59 # B4 = 60 # C5 = 61 # CSharp5 = 62 # DFlat5 = 62 # D5 = 63 # DSharp5 = 64 # EFlat5 = 64 # E5 = 65 # F5 = 66 # FSharp5 = 67 # GFlat5 = 67 # G5 = 68 # GSharp5 = 69 # AFlat5 = 69 # A5 = 70 # ASharp5 = 71 # BFlat5 = 71 # B5 = 72 # C6 = 73 # CSharp6 = 74 # DFlat6 = 74 # D6 = 75 # DSharp6 = 76 # EFlat6 = 76 # E6 = 77 # F6 = 78 # FSharp6 = 79 # GFlat6 = 79 # G6 = 80 # GSharp6 = 81 # AFlat6 = 81 # A6 = 82 # ASharp6 = 83 # BFlat6 = 83 # B6 = 84 # C7 = 85 # CSharp7 = 86 # DFlat7 = 86 # D7 = 87 # DSharp7 = 88 # EFlat7 = 88 # E7 = 89 # F7 = 90 # FSharp7 = 91 # GFlat7 = 91 # G7 = 92 # GSharp7 = 93 # AFlat7 = 93 # A7 = 94 # ASharp7 = 95 # BFlat7 = 95 # B7 = 96 # C8 = 97 # CSharp8 = 98 # DFlat8 = 98 # D8 = 99 # DSharp8 = 100 # EFlat8 = 100 # E8 = 101 # F8 = 102 # FSharp8 = 103 # GFlat8 = 103 # G8 = 104 # GSharp8 = 105 # AFlat8 = 105 # A8 = 106 # ASharp8 = 107 # BFlat8 = 107 # B8 = 108 # C9 = 109 # CSharp9 = 110 # DFlat9 = 110 # D9 = 111 # DSharp9 = 112 # EFlat9 = 112 # E9 = 113 # F9 = 114 # FSharp9 = 115 # GFlat9 = 115 # G9 = 116 # GSharp9 = 117 # AFlat9 = 117 # A9 = 118 # ASharp9 = 119 # BFlat9 = 119 # B9 = 120 # Off = 128 # AllOff = 129 # CleanSynths = 130 # Stop = 131 # Play = 132 # SetPitch = 133 # Methods # #a0? # #a1? # #a2? # #a3? # #a4? # #a5? # #a6? # #a7? # #a8? # #a9? # #a_flat0? # #a_flat1? # #a_flat2? # #a_flat3? # #a_flat4? # #a_flat5? # #a_flat6? # #a_flat7? # #a_flat8? # #a_flat9? # #a_sharp0? # #a_sharp1? # #a_sharp2? # #a_sharp3? # #a_sharp4? # #a_sharp5? # #a_sharp6? # #a_sharp7? # #a_sharp8? # #a_sharp9? # #all_off? # #b0? # #b1? # #b2? # #b3? # #b4? # #b5? # #b6? # #b7? # #b8? # #b9? # #b_flat0? # #b_flat1? # #b_flat2? # #b_flat3? # #b_flat4? # #b_flat5? # #b_flat6? # #b_flat7? # #b_flat8? # #b_flat9? # #c0? # #c1? # #c2? # #c3? # #c4? # #c5? # #c6? # #c7? # #c8? # #c9? # #c_sharp0? # #c_sharp1? # #c_sharp2? # #c_sharp3? # #c_sharp4? # #c_sharp5? # #c_sharp6? # #c_sharp7? # #c_sharp8? # #c_sharp9? # #clean_synths? # #d0? # #d1? # #d2? # #d3? # #d4? # #d5? # #d6? # #d7? # #d8? # #d9? # #d_flat0? # #d_flat1? # #d_flat2? # #d_flat3? # #d_flat4? # #d_flat5? # #d_flat6? # #d_flat7? # #d_flat8? # #d_flat9? # #d_sharp0? # #d_sharp1? # #d_sharp2? # #d_sharp3? # #d_sharp4? # #d_sharp5? # #d_sharp6? # #d_sharp7? # #d_sharp8? # #d_sharp9? # #e0? # #e1? # #e2? # #e3? # #e4? # #e5? # #e6? # #e7? # #e8? # #e9? # #e_flat0? # #e_flat1? # #e_flat2? # #e_flat3? # #e_flat4? # #e_flat5? # #e_flat6? # #e_flat7? # #e_flat8? # #e_flat9? # #f0? # #f1? # #f2? # #f3? # #f4? # #f5? # #f6? # #f7? # #f8? # #f9? # #f_sharp0? # #f_sharp1? # #f_sharp2? # #f_sharp3? # #f_sharp4? # #f_sharp5? # #f_sharp6? # #f_sharp7? # #f_sharp8? # #f_sharp9? # #g0? # #g1? # #g2? # #g3? # #g4? # #g5? # #g6? # #g7? # #g8? # #g9? # #g_flat0? # #g_flat1? # #g_flat2? # #g_flat3? # #g_flat4? # #g_flat5? # #g_flat6? # #g_flat7? # #g_flat8? # #g_flat9? # #g_sharp0? # #g_sharp1? # #g_sharp2? # #g_sharp3? # #g_sharp4? # #g_sharp5? # #g_sharp6? # #g_sharp7? # #g_sharp8? # #g_sharp9? # #none? # #off? # #play? # #set_pitch? # #stop? #","title":"Note"},{"location":"SunVox/Note.html#SunVox::Note","text":"","title":"Note"},{"location":"SunVox/Note.html#SunVox::Note-members","text":"","title":"Members"},{"location":"SunVox/Note.html#SunVox::Note::None","text":"","title":"None"},{"location":"SunVox/Note.html#SunVox::Note::C0","text":"","title":"C0"},{"location":"SunVox/Note.html#SunVox::Note::CSharp0","text":"","title":"CSharp0"},{"location":"SunVox/Note.html#SunVox::Note::DFlat0","text":"","title":"DFlat0"},{"location":"SunVox/Note.html#SunVox::Note::D0","text":"","title":"D0"},{"location":"SunVox/Note.html#SunVox::Note::DSharp0","text":"","title":"DSharp0"},{"location":"SunVox/Note.html#SunVox::Note::EFlat0","text":"","title":"EFlat0"},{"location":"SunVox/Note.html#SunVox::Note::E0","text":"","title":"E0"},{"location":"SunVox/Note.html#SunVox::Note::F0","text":"","title":"F0"},{"location":"SunVox/Note.html#SunVox::Note::FSharp0","text":"","title":"FSharp0"},{"location":"SunVox/Note.html#SunVox::Note::GFlat0","text":"","title":"GFlat0"},{"location":"SunVox/Note.html#SunVox::Note::G0","text":"","title":"G0"},{"location":"SunVox/Note.html#SunVox::Note::GSharp0","text":"","title":"GSharp0"},{"location":"SunVox/Note.html#SunVox::Note::AFlat0","text":"","title":"AFlat0"},{"location":"SunVox/Note.html#SunVox::Note::A0","text":"","title":"A0"},{"location":"SunVox/Note.html#SunVox::Note::ASharp0","text":"","title":"ASharp0"},{"location":"SunVox/Note.html#SunVox::Note::BFlat0","text":"","title":"BFlat0"},{"location":"SunVox/Note.html#SunVox::Note::B0","text":"","title":"B0"},{"location":"SunVox/Note.html#SunVox::Note::C1","text":"","title":"C1"},{"location":"SunVox/Note.html#SunVox::Note::CSharp1","text":"","title":"CSharp1"},{"location":"SunVox/Note.html#SunVox::Note::DFlat1","text":"","title":"DFlat1"},{"location":"SunVox/Note.html#SunVox::Note::D1","text":"","title":"D1"},{"location":"SunVox/Note.html#SunVox::Note::DSharp1","text":"","title":"DSharp1"},{"location":"SunVox/Note.html#SunVox::Note::EFlat1","text":"","title":"EFlat1"},{"location":"SunVox/Note.html#SunVox::Note::E1","text":"","title":"E1"},{"location":"SunVox/Note.html#SunVox::Note::F1","text":"","title":"F1"},{"location":"SunVox/Note.html#SunVox::Note::FSharp1","text":"","title":"FSharp1"},{"location":"SunVox/Note.html#SunVox::Note::GFlat1","text":"","title":"GFlat1"},{"location":"SunVox/Note.html#SunVox::Note::G1","text":"","title":"G1"},{"location":"SunVox/Note.html#SunVox::Note::GSharp1","text":"","title":"GSharp1"},{"location":"SunVox/Note.html#SunVox::Note::AFlat1","text":"","title":"AFlat1"},{"location":"SunVox/Note.html#SunVox::Note::A1","text":"","title":"A1"},{"location":"SunVox/Note.html#SunVox::Note::ASharp1","text":"","title":"ASharp1"},{"location":"SunVox/Note.html#SunVox::Note::BFlat1","text":"","title":"BFlat1"},{"location":"SunVox/Note.html#SunVox::Note::B1","text":"","title":"B1"},{"location":"SunVox/Note.html#SunVox::Note::C2","text":"","title":"C2"},{"location":"SunVox/Note.html#SunVox::Note::CSharp2","text":"","title":"CSharp2"},{"location":"SunVox/Note.html#SunVox::Note::DFlat2","text":"","title":"DFlat2"},{"location":"SunVox/Note.html#SunVox::Note::D2","text":"","title":"D2"},{"location":"SunVox/Note.html#SunVox::Note::DSharp2","text":"","title":"DSharp2"},{"location":"SunVox/Note.html#SunVox::Note::EFlat2","text":"","title":"EFlat2"},{"location":"SunVox/Note.html#SunVox::Note::E2","text":"","title":"E2"},{"location":"SunVox/Note.html#SunVox::Note::F2","text":"","title":"F2"},{"location":"SunVox/Note.html#SunVox::Note::FSharp2","text":"","title":"FSharp2"},{"location":"SunVox/Note.html#SunVox::Note::GFlat2","text":"","title":"GFlat2"},{"location":"SunVox/Note.html#SunVox::Note::G2","text":"","title":"G2"},{"location":"SunVox/Note.html#SunVox::Note::GSharp2","text":"","title":"GSharp2"},{"location":"SunVox/Note.html#SunVox::Note::AFlat2","text":"","title":"AFlat2"},{"location":"SunVox/Note.html#SunVox::Note::A2","text":"","title":"A2"},{"location":"SunVox/Note.html#SunVox::Note::ASharp2","text":"","title":"ASharp2"},{"location":"SunVox/Note.html#SunVox::Note::BFlat2","text":"","title":"BFlat2"},{"location":"SunVox/Note.html#SunVox::Note::B2","text":"","title":"B2"},{"location":"SunVox/Note.html#SunVox::Note::C3","text":"","title":"C3"},{"location":"SunVox/Note.html#SunVox::Note::CSharp3","text":"","title":"CSharp3"},{"location":"SunVox/Note.html#SunVox::Note::DFlat3","text":"","title":"DFlat3"},{"location":"SunVox/Note.html#SunVox::Note::D3","text":"","title":"D3"},{"location":"SunVox/Note.html#SunVox::Note::DSharp3","text":"","title":"DSharp3"},{"location":"SunVox/Note.html#SunVox::Note::EFlat3","text":"","title":"EFlat3"},{"location":"SunVox/Note.html#SunVox::Note::E3","text":"","title":"E3"},{"location":"SunVox/Note.html#SunVox::Note::F3","text":"","title":"F3"},{"location":"SunVox/Note.html#SunVox::Note::FSharp3","text":"","title":"FSharp3"},{"location":"SunVox/Note.html#SunVox::Note::GFlat3","text":"","title":"GFlat3"},{"location":"SunVox/Note.html#SunVox::Note::G3","text":"","title":"G3"},{"location":"SunVox/Note.html#SunVox::Note::GSharp3","text":"","title":"GSharp3"},{"location":"SunVox/Note.html#SunVox::Note::AFlat3","text":"","title":"AFlat3"},{"location":"SunVox/Note.html#SunVox::Note::A3","text":"","title":"A3"},{"location":"SunVox/Note.html#SunVox::Note::ASharp3","text":"","title":"ASharp3"},{"location":"SunVox/Note.html#SunVox::Note::BFlat3","text":"","title":"BFlat3"},{"location":"SunVox/Note.html#SunVox::Note::B3","text":"","title":"B3"},{"location":"SunVox/Note.html#SunVox::Note::C4","text":"","title":"C4"},{"location":"SunVox/Note.html#SunVox::Note::CSharp4","text":"","title":"CSharp4"},{"location":"SunVox/Note.html#SunVox::Note::DFlat4","text":"","title":"DFlat4"},{"location":"SunVox/Note.html#SunVox::Note::D4","text":"","title":"D4"},{"location":"SunVox/Note.html#SunVox::Note::DSharp4","text":"","title":"DSharp4"},{"location":"SunVox/Note.html#SunVox::Note::EFlat4","text":"","title":"EFlat4"},{"location":"SunVox/Note.html#SunVox::Note::E4","text":"","title":"E4"},{"location":"SunVox/Note.html#SunVox::Note::F4","text":"","title":"F4"},{"location":"SunVox/Note.html#SunVox::Note::FSharp4","text":"","title":"FSharp4"},{"location":"SunVox/Note.html#SunVox::Note::GFlat4","text":"","title":"GFlat4"},{"location":"SunVox/Note.html#SunVox::Note::G4","text":"","title":"G4"},{"location":"SunVox/Note.html#SunVox::Note::GSharp4","text":"","title":"GSharp4"},{"location":"SunVox/Note.html#SunVox::Note::AFlat4","text":"","title":"AFlat4"},{"location":"SunVox/Note.html#SunVox::Note::A4","text":"","title":"A4"},{"location":"SunVox/Note.html#SunVox::Note::ASharp4","text":"","title":"ASharp4"},{"location":"SunVox/Note.html#SunVox::Note::BFlat4","text":"","title":"BFlat4"},{"location":"SunVox/Note.html#SunVox::Note::B4","text":"","title":"B4"},{"location":"SunVox/Note.html#SunVox::Note::C5","text":"","title":"C5"},{"location":"SunVox/Note.html#SunVox::Note::CSharp5","text":"","title":"CSharp5"},{"location":"SunVox/Note.html#SunVox::Note::DFlat5","text":"","title":"DFlat5"},{"location":"SunVox/Note.html#SunVox::Note::D5","text":"","title":"D5"},{"location":"SunVox/Note.html#SunVox::Note::DSharp5","text":"","title":"DSharp5"},{"location":"SunVox/Note.html#SunVox::Note::EFlat5","text":"","title":"EFlat5"},{"location":"SunVox/Note.html#SunVox::Note::E5","text":"","title":"E5"},{"location":"SunVox/Note.html#SunVox::Note::F5","text":"","title":"F5"},{"location":"SunVox/Note.html#SunVox::Note::FSharp5","text":"","title":"FSharp5"},{"location":"SunVox/Note.html#SunVox::Note::GFlat5","text":"","title":"GFlat5"},{"location":"SunVox/Note.html#SunVox::Note::G5","text":"","title":"G5"},{"location":"SunVox/Note.html#SunVox::Note::GSharp5","text":"","title":"GSharp5"},{"location":"SunVox/Note.html#SunVox::Note::AFlat5","text":"","title":"AFlat5"},{"location":"SunVox/Note.html#SunVox::Note::A5","text":"","title":"A5"},{"location":"SunVox/Note.html#SunVox::Note::ASharp5","text":"","title":"ASharp5"},{"location":"SunVox/Note.html#SunVox::Note::BFlat5","text":"","title":"BFlat5"},{"location":"SunVox/Note.html#SunVox::Note::B5","text":"","title":"B5"},{"location":"SunVox/Note.html#SunVox::Note::C6","text":"","title":"C6"},{"location":"SunVox/Note.html#SunVox::Note::CSharp6","text":"","title":"CSharp6"},{"location":"SunVox/Note.html#SunVox::Note::DFlat6","text":"","title":"DFlat6"},{"location":"SunVox/Note.html#SunVox::Note::D6","text":"","title":"D6"},{"location":"SunVox/Note.html#SunVox::Note::DSharp6","text":"","title":"DSharp6"},{"location":"SunVox/Note.html#SunVox::Note::EFlat6","text":"","title":"EFlat6"},{"location":"SunVox/Note.html#SunVox::Note::E6","text":"","title":"E6"},{"location":"SunVox/Note.html#SunVox::Note::F6","text":"","title":"F6"},{"location":"SunVox/Note.html#SunVox::Note::FSharp6","text":"","title":"FSharp6"},{"location":"SunVox/Note.html#SunVox::Note::GFlat6","text":"","title":"GFlat6"},{"location":"SunVox/Note.html#SunVox::Note::G6","text":"","title":"G6"},{"location":"SunVox/Note.html#SunVox::Note::GSharp6","text":"","title":"GSharp6"},{"location":"SunVox/Note.html#SunVox::Note::AFlat6","text":"","title":"AFlat6"},{"location":"SunVox/Note.html#SunVox::Note::A6","text":"","title":"A6"},{"location":"SunVox/Note.html#SunVox::Note::ASharp6","text":"","title":"ASharp6"},{"location":"SunVox/Note.html#SunVox::Note::BFlat6","text":"","title":"BFlat6"},{"location":"SunVox/Note.html#SunVox::Note::B6","text":"","title":"B6"},{"location":"SunVox/Note.html#SunVox::Note::C7","text":"","title":"C7"},{"location":"SunVox/Note.html#SunVox::Note::CSharp7","text":"","title":"CSharp7"},{"location":"SunVox/Note.html#SunVox::Note::DFlat7","text":"","title":"DFlat7"},{"location":"SunVox/Note.html#SunVox::Note::D7","text":"","title":"D7"},{"location":"SunVox/Note.html#SunVox::Note::DSharp7","text":"","title":"DSharp7"},{"location":"SunVox/Note.html#SunVox::Note::EFlat7","text":"","title":"EFlat7"},{"location":"SunVox/Note.html#SunVox::Note::E7","text":"","title":"E7"},{"location":"SunVox/Note.html#SunVox::Note::F7","text":"","title":"F7"},{"location":"SunVox/Note.html#SunVox::Note::FSharp7","text":"","title":"FSharp7"},{"location":"SunVox/Note.html#SunVox::Note::GFlat7","text":"","title":"GFlat7"},{"location":"SunVox/Note.html#SunVox::Note::G7","text":"","title":"G7"},{"location":"SunVox/Note.html#SunVox::Note::GSharp7","text":"","title":"GSharp7"},{"location":"SunVox/Note.html#SunVox::Note::AFlat7","text":"","title":"AFlat7"},{"location":"SunVox/Note.html#SunVox::Note::A7","text":"","title":"A7"},{"location":"SunVox/Note.html#SunVox::Note::ASharp7","text":"","title":"ASharp7"},{"location":"SunVox/Note.html#SunVox::Note::BFlat7","text":"","title":"BFlat7"},{"location":"SunVox/Note.html#SunVox::Note::B7","text":"","title":"B7"},{"location":"SunVox/Note.html#SunVox::Note::C8","text":"","title":"C8"},{"location":"SunVox/Note.html#SunVox::Note::CSharp8","text":"","title":"CSharp8"},{"location":"SunVox/Note.html#SunVox::Note::DFlat8","text":"","title":"DFlat8"},{"location":"SunVox/Note.html#SunVox::Note::D8","text":"","title":"D8"},{"location":"SunVox/Note.html#SunVox::Note::DSharp8","text":"","title":"DSharp8"},{"location":"SunVox/Note.html#SunVox::Note::EFlat8","text":"","title":"EFlat8"},{"location":"SunVox/Note.html#SunVox::Note::E8","text":"","title":"E8"},{"location":"SunVox/Note.html#SunVox::Note::F8","text":"","title":"F8"},{"location":"SunVox/Note.html#SunVox::Note::FSharp8","text":"","title":"FSharp8"},{"location":"SunVox/Note.html#SunVox::Note::GFlat8","text":"","title":"GFlat8"},{"location":"SunVox/Note.html#SunVox::Note::G8","text":"","title":"G8"},{"location":"SunVox/Note.html#SunVox::Note::GSharp8","text":"","title":"GSharp8"},{"location":"SunVox/Note.html#SunVox::Note::AFlat8","text":"","title":"AFlat8"},{"location":"SunVox/Note.html#SunVox::Note::A8","text":"","title":"A8"},{"location":"SunVox/Note.html#SunVox::Note::ASharp8","text":"","title":"ASharp8"},{"location":"SunVox/Note.html#SunVox::Note::BFlat8","text":"","title":"BFlat8"},{"location":"SunVox/Note.html#SunVox::Note::B8","text":"","title":"B8"},{"location":"SunVox/Note.html#SunVox::Note::C9","text":"","title":"C9"},{"location":"SunVox/Note.html#SunVox::Note::CSharp9","text":"","title":"CSharp9"},{"location":"SunVox/Note.html#SunVox::Note::DFlat9","text":"","title":"DFlat9"},{"location":"SunVox/Note.html#SunVox::Note::D9","text":"","title":"D9"},{"location":"SunVox/Note.html#SunVox::Note::DSharp9","text":"","title":"DSharp9"},{"location":"SunVox/Note.html#SunVox::Note::EFlat9","text":"","title":"EFlat9"},{"location":"SunVox/Note.html#SunVox::Note::E9","text":"","title":"E9"},{"location":"SunVox/Note.html#SunVox::Note::F9","text":"","title":"F9"},{"location":"SunVox/Note.html#SunVox::Note::FSharp9","text":"","title":"FSharp9"},{"location":"SunVox/Note.html#SunVox::Note::GFlat9","text":"","title":"GFlat9"},{"location":"SunVox/Note.html#SunVox::Note::G9","text":"","title":"G9"},{"location":"SunVox/Note.html#SunVox::Note::GSharp9","text":"","title":"GSharp9"},{"location":"SunVox/Note.html#SunVox::Note::AFlat9","text":"","title":"AFlat9"},{"location":"SunVox/Note.html#SunVox::Note::A9","text":"","title":"A9"},{"location":"SunVox/Note.html#SunVox::Note::ASharp9","text":"","title":"ASharp9"},{"location":"SunVox/Note.html#SunVox::Note::BFlat9","text":"","title":"BFlat9"},{"location":"SunVox/Note.html#SunVox::Note::B9","text":"","title":"B9"},{"location":"SunVox/Note.html#SunVox::Note::Off","text":"","title":"Off"},{"location":"SunVox/Note.html#SunVox::Note::AllOff","text":"","title":"AllOff"},{"location":"SunVox/Note.html#SunVox::Note::CleanSynths","text":"","title":"CleanSynths"},{"location":"SunVox/Note.html#SunVox::Note::Stop","text":"","title":"Stop"},{"location":"SunVox/Note.html#SunVox::Note::Play","text":"","title":"Play"},{"location":"SunVox/Note.html#SunVox::Note::SetPitch","text":"","title":"SetPitch"},{"location":"SunVox/Note.html#SunVox::Note-methods","text":"","title":"Methods"},{"location":"SunVox/Note.html#SunVox::Note#a0?","text":"","title":"#a0?"},{"location":"SunVox/Note.html#SunVox::Note#a1?","text":"","title":"#a1?"},{"location":"SunVox/Note.html#SunVox::Note#a2?","text":"","title":"#a2?"},{"location":"SunVox/Note.html#SunVox::Note#a3?","text":"","title":"#a3?"},{"location":"SunVox/Note.html#SunVox::Note#a4?","text":"","title":"#a4?"},{"location":"SunVox/Note.html#SunVox::Note#a5?","text":"","title":"#a5?"},{"location":"SunVox/Note.html#SunVox::Note#a6?","text":"","title":"#a6?"},{"location":"SunVox/Note.html#SunVox::Note#a7?","text":"","title":"#a7?"},{"location":"SunVox/Note.html#SunVox::Note#a8?","text":"","title":"#a8?"},{"location":"SunVox/Note.html#SunVox::Note#a9?","text":"","title":"#a9?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat0?","text":"","title":"#a_flat0?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat1?","text":"","title":"#a_flat1?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat2?","text":"","title":"#a_flat2?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat3?","text":"","title":"#a_flat3?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat4?","text":"","title":"#a_flat4?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat5?","text":"","title":"#a_flat5?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat6?","text":"","title":"#a_flat6?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat7?","text":"","title":"#a_flat7?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat8?","text":"","title":"#a_flat8?"},{"location":"SunVox/Note.html#SunVox::Note#a_flat9?","text":"","title":"#a_flat9?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp0?","text":"","title":"#a_sharp0?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp1?","text":"","title":"#a_sharp1?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp2?","text":"","title":"#a_sharp2?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp3?","text":"","title":"#a_sharp3?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp4?","text":"","title":"#a_sharp4?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp5?","text":"","title":"#a_sharp5?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp6?","text":"","title":"#a_sharp6?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp7?","text":"","title":"#a_sharp7?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp8?","text":"","title":"#a_sharp8?"},{"location":"SunVox/Note.html#SunVox::Note#a_sharp9?","text":"","title":"#a_sharp9?"},{"location":"SunVox/Note.html#SunVox::Note#all_off?","text":"","title":"#all_off?"},{"location":"SunVox/Note.html#SunVox::Note#b0?","text":"","title":"#b0?"},{"location":"SunVox/Note.html#SunVox::Note#b1?","text":"","title":"#b1?"},{"location":"SunVox/Note.html#SunVox::Note#b2?","text":"","title":"#b2?"},{"location":"SunVox/Note.html#SunVox::Note#b3?","text":"","title":"#b3?"},{"location":"SunVox/Note.html#SunVox::Note#b4?","text":"","title":"#b4?"},{"location":"SunVox/Note.html#SunVox::Note#b5?","text":"","title":"#b5?"},{"location":"SunVox/Note.html#SunVox::Note#b6?","text":"","title":"#b6?"},{"location":"SunVox/Note.html#SunVox::Note#b7?","text":"","title":"#b7?"},{"location":"SunVox/Note.html#SunVox::Note#b8?","text":"","title":"#b8?"},{"location":"SunVox/Note.html#SunVox::Note#b9?","text":"","title":"#b9?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat0?","text":"","title":"#b_flat0?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat1?","text":"","title":"#b_flat1?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat2?","text":"","title":"#b_flat2?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat3?","text":"","title":"#b_flat3?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat4?","text":"","title":"#b_flat4?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat5?","text":"","title":"#b_flat5?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat6?","text":"","title":"#b_flat6?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat7?","text":"","title":"#b_flat7?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat8?","text":"","title":"#b_flat8?"},{"location":"SunVox/Note.html#SunVox::Note#b_flat9?","text":"","title":"#b_flat9?"},{"location":"SunVox/Note.html#SunVox::Note#c0?","text":"","title":"#c0?"},{"location":"SunVox/Note.html#SunVox::Note#c1?","text":"","title":"#c1?"},{"location":"SunVox/Note.html#SunVox::Note#c2?","text":"","title":"#c2?"},{"location":"SunVox/Note.html#SunVox::Note#c3?","text":"","title":"#c3?"},{"location":"SunVox/Note.html#SunVox::Note#c4?","text":"","title":"#c4?"},{"location":"SunVox/Note.html#SunVox::Note#c5?","text":"","title":"#c5?"},{"location":"SunVox/Note.html#SunVox::Note#c6?","text":"","title":"#c6?"},{"location":"SunVox/Note.html#SunVox::Note#c7?","text":"","title":"#c7?"},{"location":"SunVox/Note.html#SunVox::Note#c8?","text":"","title":"#c8?"},{"location":"SunVox/Note.html#SunVox::Note#c9?","text":"","title":"#c9?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp0?","text":"","title":"#c_sharp0?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp1?","text":"","title":"#c_sharp1?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp2?","text":"","title":"#c_sharp2?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp3?","text":"","title":"#c_sharp3?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp4?","text":"","title":"#c_sharp4?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp5?","text":"","title":"#c_sharp5?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp6?","text":"","title":"#c_sharp6?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp7?","text":"","title":"#c_sharp7?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp8?","text":"","title":"#c_sharp8?"},{"location":"SunVox/Note.html#SunVox::Note#c_sharp9?","text":"","title":"#c_sharp9?"},{"location":"SunVox/Note.html#SunVox::Note#clean_synths?","text":"","title":"#clean_synths?"},{"location":"SunVox/Note.html#SunVox::Note#d0?","text":"","title":"#d0?"},{"location":"SunVox/Note.html#SunVox::Note#d1?","text":"","title":"#d1?"},{"location":"SunVox/Note.html#SunVox::Note#d2?","text":"","title":"#d2?"},{"location":"SunVox/Note.html#SunVox::Note#d3?","text":"","title":"#d3?"},{"location":"SunVox/Note.html#SunVox::Note#d4?","text":"","title":"#d4?"},{"location":"SunVox/Note.html#SunVox::Note#d5?","text":"","title":"#d5?"},{"location":"SunVox/Note.html#SunVox::Note#d6?","text":"","title":"#d6?"},{"location":"SunVox/Note.html#SunVox::Note#d7?","text":"","title":"#d7?"},{"location":"SunVox/Note.html#SunVox::Note#d8?","text":"","title":"#d8?"},{"location":"SunVox/Note.html#SunVox::Note#d9?","text":"","title":"#d9?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat0?","text":"","title":"#d_flat0?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat1?","text":"","title":"#d_flat1?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat2?","text":"","title":"#d_flat2?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat3?","text":"","title":"#d_flat3?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat4?","text":"","title":"#d_flat4?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat5?","text":"","title":"#d_flat5?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat6?","text":"","title":"#d_flat6?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat7?","text":"","title":"#d_flat7?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat8?","text":"","title":"#d_flat8?"},{"location":"SunVox/Note.html#SunVox::Note#d_flat9?","text":"","title":"#d_flat9?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp0?","text":"","title":"#d_sharp0?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp1?","text":"","title":"#d_sharp1?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp2?","text":"","title":"#d_sharp2?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp3?","text":"","title":"#d_sharp3?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp4?","text":"","title":"#d_sharp4?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp5?","text":"","title":"#d_sharp5?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp6?","text":"","title":"#d_sharp6?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp7?","text":"","title":"#d_sharp7?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp8?","text":"","title":"#d_sharp8?"},{"location":"SunVox/Note.html#SunVox::Note#d_sharp9?","text":"","title":"#d_sharp9?"},{"location":"SunVox/Note.html#SunVox::Note#e0?","text":"","title":"#e0?"},{"location":"SunVox/Note.html#SunVox::Note#e1?","text":"","title":"#e1?"},{"location":"SunVox/Note.html#SunVox::Note#e2?","text":"","title":"#e2?"},{"location":"SunVox/Note.html#SunVox::Note#e3?","text":"","title":"#e3?"},{"location":"SunVox/Note.html#SunVox::Note#e4?","text":"","title":"#e4?"},{"location":"SunVox/Note.html#SunVox::Note#e5?","text":"","title":"#e5?"},{"location":"SunVox/Note.html#SunVox::Note#e6?","text":"","title":"#e6?"},{"location":"SunVox/Note.html#SunVox::Note#e7?","text":"","title":"#e7?"},{"location":"SunVox/Note.html#SunVox::Note#e8?","text":"","title":"#e8?"},{"location":"SunVox/Note.html#SunVox::Note#e9?","text":"","title":"#e9?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat0?","text":"","title":"#e_flat0?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat1?","text":"","title":"#e_flat1?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat2?","text":"","title":"#e_flat2?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat3?","text":"","title":"#e_flat3?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat4?","text":"","title":"#e_flat4?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat5?","text":"","title":"#e_flat5?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat6?","text":"","title":"#e_flat6?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat7?","text":"","title":"#e_flat7?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat8?","text":"","title":"#e_flat8?"},{"location":"SunVox/Note.html#SunVox::Note#e_flat9?","text":"","title":"#e_flat9?"},{"location":"SunVox/Note.html#SunVox::Note#f0?","text":"","title":"#f0?"},{"location":"SunVox/Note.html#SunVox::Note#f1?","text":"","title":"#f1?"},{"location":"SunVox/Note.html#SunVox::Note#f2?","text":"","title":"#f2?"},{"location":"SunVox/Note.html#SunVox::Note#f3?","text":"","title":"#f3?"},{"location":"SunVox/Note.html#SunVox::Note#f4?","text":"","title":"#f4?"},{"location":"SunVox/Note.html#SunVox::Note#f5?","text":"","title":"#f5?"},{"location":"SunVox/Note.html#SunVox::Note#f6?","text":"","title":"#f6?"},{"location":"SunVox/Note.html#SunVox::Note#f7?","text":"","title":"#f7?"},{"location":"SunVox/Note.html#SunVox::Note#f8?","text":"","title":"#f8?"},{"location":"SunVox/Note.html#SunVox::Note#f9?","text":"","title":"#f9?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp0?","text":"","title":"#f_sharp0?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp1?","text":"","title":"#f_sharp1?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp2?","text":"","title":"#f_sharp2?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp3?","text":"","title":"#f_sharp3?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp4?","text":"","title":"#f_sharp4?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp5?","text":"","title":"#f_sharp5?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp6?","text":"","title":"#f_sharp6?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp7?","text":"","title":"#f_sharp7?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp8?","text":"","title":"#f_sharp8?"},{"location":"SunVox/Note.html#SunVox::Note#f_sharp9?","text":"","title":"#f_sharp9?"},{"location":"SunVox/Note.html#SunVox::Note#g0?","text":"","title":"#g0?"},{"location":"SunVox/Note.html#SunVox::Note#g1?","text":"","title":"#g1?"},{"location":"SunVox/Note.html#SunVox::Note#g2?","text":"","title":"#g2?"},{"location":"SunVox/Note.html#SunVox::Note#g3?","text":"","title":"#g3?"},{"location":"SunVox/Note.html#SunVox::Note#g4?","text":"","title":"#g4?"},{"location":"SunVox/Note.html#SunVox::Note#g5?","text":"","title":"#g5?"},{"location":"SunVox/Note.html#SunVox::Note#g6?","text":"","title":"#g6?"},{"location":"SunVox/Note.html#SunVox::Note#g7?","text":"","title":"#g7?"},{"location":"SunVox/Note.html#SunVox::Note#g8?","text":"","title":"#g8?"},{"location":"SunVox/Note.html#SunVox::Note#g9?","text":"","title":"#g9?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat0?","text":"","title":"#g_flat0?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat1?","text":"","title":"#g_flat1?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat2?","text":"","title":"#g_flat2?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat3?","text":"","title":"#g_flat3?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat4?","text":"","title":"#g_flat4?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat5?","text":"","title":"#g_flat5?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat6?","text":"","title":"#g_flat6?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat7?","text":"","title":"#g_flat7?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat8?","text":"","title":"#g_flat8?"},{"location":"SunVox/Note.html#SunVox::Note#g_flat9?","text":"","title":"#g_flat9?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp0?","text":"","title":"#g_sharp0?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp1?","text":"","title":"#g_sharp1?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp2?","text":"","title":"#g_sharp2?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp3?","text":"","title":"#g_sharp3?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp4?","text":"","title":"#g_sharp4?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp5?","text":"","title":"#g_sharp5?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp6?","text":"","title":"#g_sharp6?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp7?","text":"","title":"#g_sharp7?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp8?","text":"","title":"#g_sharp8?"},{"location":"SunVox/Note.html#SunVox::Note#g_sharp9?","text":"","title":"#g_sharp9?"},{"location":"SunVox/Note.html#SunVox::Note#none?","text":"","title":"#none?"},{"location":"SunVox/Note.html#SunVox::Note#off?","text":"","title":"#off?"},{"location":"SunVox/Note.html#SunVox::Note#play?","text":"","title":"#play?"},{"location":"SunVox/Note.html#SunVox::Note#set_pitch?","text":"","title":"#set_pitch?"},{"location":"SunVox/Note.html#SunVox::Note#stop?","text":"","title":"#stop?"},{"location":"SunVox/SampleType.html","text":"enum SunVox::SampleType # The different float/int types that the output can be typed as. Members # Int16 = 1 # Methods # #int16? # #none? #","title":"SampleType"},{"location":"SunVox/SampleType.html#SunVox::SampleType","text":"The different float/int types that the output can be typed as.","title":"SampleType"},{"location":"SunVox/SampleType.html#SunVox::SampleType-members","text":"","title":"Members"},{"location":"SunVox/SampleType.html#SunVox::SampleType::Int16","text":"","title":"Int16"},{"location":"SunVox/SampleType.html#SunVox::SampleType-methods","text":"","title":"Methods"},{"location":"SunVox/SampleType.html#SunVox::SampleType#int16?","text":"","title":"#int16?"},{"location":"SunVox/SampleType.html#SunVox::SampleType#none?","text":"","title":"#none?"},{"location":"SunVox/Scale.html","text":"class SunVox::Scale inherits Reference # Class methods # .new ( data ) # Methods # #data : Array ( Int32 ) #","title":"Scale"},{"location":"SunVox/Scale.html#SunVox::Scale","text":"","title":"Scale"},{"location":"SunVox/Scale.html#SunVox::Scale-class-methods","text":"","title":"Class methods"},{"location":"SunVox/Scale.html#SunVox::Scale.new(data)","text":"","title":".new"},{"location":"SunVox/Scale.html#SunVox::Scale-methods","text":"","title":"Methods"},{"location":"SunVox/Scale.html#SunVox::Scale#data","text":"","title":"#data"},{"location":"SunVox/Scales.html","text":"module SunVox::Scales # Constants # CHROMATIC = SunVox :: Scale . new ( [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ) # HEPTATONIC = SunVox :: Scale . new ( [ 3 , 1 , 1 , 1 , 1 , 3 ] ) # HEXATONIC = SunVox :: Scale . new ( [ 3 , 2 , 1 , 1 , 3 ] ) # MINOR_HEXATONIC = SunVox :: Scale . new ( [ 2 , 1 , 2 , 2 , 3 ] ) # NONATONIC = SunVox :: Scale . new ( [ 2 , 1 , 1 , 1 , 1 , 1 , 2 , 1 ] ) # OCTATONIC_HALF_WHOLE = SunVox :: Scale . new ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 ] ) # OCTATONIC_WHOLE_HALF = SunVox :: Scale . new ( [ 2 , 1 , 2 , 1 , 2 , 1 , 2 ] ) # PENTATONIC = SunVox :: Scale . new ( [ 3 , 2 , 1 , 4 ] ) # Class methods # .make ( starting_note : SunVox::Note , scale : SunVox::Scale ) #","title":"Scales"},{"location":"SunVox/Scales.html#SunVox::Scales","text":"","title":"Scales"},{"location":"SunVox/Scales.html#SunVox::Scales-constants","text":"","title":"Constants"},{"location":"SunVox/Scales.html#SunVox::Scales::CHROMATIC","text":"","title":"CHROMATIC"},{"location":"SunVox/Scales.html#SunVox::Scales::HEPTATONIC","text":"","title":"HEPTATONIC"},{"location":"SunVox/Scales.html#SunVox::Scales::HEXATONIC","text":"","title":"HEXATONIC"},{"location":"SunVox/Scales.html#SunVox::Scales::MINOR_HEXATONIC","text":"","title":"MINOR_HEXATONIC"},{"location":"SunVox/Scales.html#SunVox::Scales::NONATONIC","text":"","title":"NONATONIC"},{"location":"SunVox/Scales.html#SunVox::Scales::OCTATONIC_HALF_WHOLE","text":"","title":"OCTATONIC_HALF_WHOLE"},{"location":"SunVox/Scales.html#SunVox::Scales::OCTATONIC_WHOLE_HALF","text":"","title":"OCTATONIC_WHOLE_HALF"},{"location":"SunVox/Scales.html#SunVox::Scales::PENTATONIC","text":"","title":"PENTATONIC"},{"location":"SunVox/Scales.html#SunVox::Scales-class-methods","text":"","title":"Class methods"},{"location":"SunVox/Scales.html#SunVox::Scales.make(starting_note,scale)","text":"","title":".make"},{"location":"SunVox/Slot.html","text":"enum SunVox::Slot # The slots SunVox can use. MAX: 16 Members # Zero = 0 # One = 1 # Two = 2 # Three = 3 # Four = 4 # Five = 5 # Six = 6 # Seven = 7 # Eight = 8 # Nine = 9 # Ten = 10 # Eleven = 11 # Twelve = 12 # Thirteen = 13 # Fourteen = 14 # Fifteen = 15 # Methods # #eight? # #eleven? # #fifteen? # #five? # #four? # #fourteen? # #from_int ( in_int ) # Allows for conversion of int types to Slot, but throws exceptions if it is outside the range of 16 slots. #nine? # #one? # #seven? # #six? # #ten? # #thirteen? # #three? # #twelve? # #two? # #zero? #","title":"Slot"},{"location":"SunVox/Slot.html#SunVox::Slot","text":"The slots SunVox can use. MAX: 16","title":"Slot"},{"location":"SunVox/Slot.html#SunVox::Slot-members","text":"","title":"Members"},{"location":"SunVox/Slot.html#SunVox::Slot::Zero","text":"","title":"Zero"},{"location":"SunVox/Slot.html#SunVox::Slot::One","text":"","title":"One"},{"location":"SunVox/Slot.html#SunVox::Slot::Two","text":"","title":"Two"},{"location":"SunVox/Slot.html#SunVox::Slot::Three","text":"","title":"Three"},{"location":"SunVox/Slot.html#SunVox::Slot::Four","text":"","title":"Four"},{"location":"SunVox/Slot.html#SunVox::Slot::Five","text":"","title":"Five"},{"location":"SunVox/Slot.html#SunVox::Slot::Six","text":"","title":"Six"},{"location":"SunVox/Slot.html#SunVox::Slot::Seven","text":"","title":"Seven"},{"location":"SunVox/Slot.html#SunVox::Slot::Eight","text":"","title":"Eight"},{"location":"SunVox/Slot.html#SunVox::Slot::Nine","text":"","title":"Nine"},{"location":"SunVox/Slot.html#SunVox::Slot::Ten","text":"","title":"Ten"},{"location":"SunVox/Slot.html#SunVox::Slot::Eleven","text":"","title":"Eleven"},{"location":"SunVox/Slot.html#SunVox::Slot::Twelve","text":"","title":"Twelve"},{"location":"SunVox/Slot.html#SunVox::Slot::Thirteen","text":"","title":"Thirteen"},{"location":"SunVox/Slot.html#SunVox::Slot::Fourteen","text":"","title":"Fourteen"},{"location":"SunVox/Slot.html#SunVox::Slot::Fifteen","text":"","title":"Fifteen"},{"location":"SunVox/Slot.html#SunVox::Slot-methods","text":"","title":"Methods"},{"location":"SunVox/Slot.html#SunVox::Slot#eight?","text":"","title":"#eight?"},{"location":"SunVox/Slot.html#SunVox::Slot#eleven?","text":"","title":"#eleven?"},{"location":"SunVox/Slot.html#SunVox::Slot#fifteen?","text":"","title":"#fifteen?"},{"location":"SunVox/Slot.html#SunVox::Slot#five?","text":"","title":"#five?"},{"location":"SunVox/Slot.html#SunVox::Slot#four?","text":"","title":"#four?"},{"location":"SunVox/Slot.html#SunVox::Slot#fourteen?","text":"","title":"#fourteen?"},{"location":"SunVox/Slot.html#SunVox::Slot#from_int(in_int)","text":"Allows for conversion of int types to Slot, but throws exceptions if it is outside the range of 16 slots.","title":"#from_int"},{"location":"SunVox/Slot.html#SunVox::Slot#nine?","text":"","title":"#nine?"},{"location":"SunVox/Slot.html#SunVox::Slot#one?","text":"","title":"#one?"},{"location":"SunVox/Slot.html#SunVox::Slot#seven?","text":"","title":"#seven?"},{"location":"SunVox/Slot.html#SunVox::Slot#six?","text":"","title":"#six?"},{"location":"SunVox/Slot.html#SunVox::Slot#ten?","text":"","title":"#ten?"},{"location":"SunVox/Slot.html#SunVox::Slot#thirteen?","text":"","title":"#thirteen?"},{"location":"SunVox/Slot.html#SunVox::Slot#three?","text":"","title":"#three?"},{"location":"SunVox/Slot.html#SunVox::Slot#twelve?","text":"","title":"#twelve?"},{"location":"SunVox/Slot.html#SunVox::Slot#two?","text":"","title":"#two?"},{"location":"SunVox/Slot.html#SunVox::Slot#zero?","text":"","title":"#zero?"},{"location":"SunVox/Modules/Effects.html","text":"module SunVox::Modules::Effects # Constants # AMPLIFIER = SunVox :: ModuleType . new ( \"Amplifier\" ) # COMPRESSOR = SunVox :: ModuleType . new ( \"Compressor\" ) # DC_BLOCKER = SunVox :: ModuleType . new ( \"DC Blocker\" ) # DELAY = SunVox :: ModuleType . new ( \"Delay\" ) # DISTORTION = SunVox :: ModuleType . new ( \"Distortion\" ) # ECHO = SunVox :: ModuleType . new ( \"Echo\" ) # EQ = SunVox :: ModuleType . new ( \"EQ\" ) # FILER_PRO = SunVox :: ModuleType . new ( \"Filter Pro\" ) # FILTER = SunVox :: ModuleType . new ( \"Filter\" ) # FLANGER = SunVox :: ModuleType . new ( \"Flanger\" ) # LFO = SunVox :: ModuleType . new ( \"LFO\" ) # LOOP = SunVox :: ModuleType . new ( \"Loop\" ) # MODULATOR = SunVox :: ModuleType . new ( \"Modulator\" ) # PITCH_SHIFTER = SunVox :: ModuleType . new ( \"Pitch shifter\" ) # REVERB = SunVox :: ModuleType . new ( \"Reverb\" ) # VIBRATO = SunVox :: ModuleType . new ( \"Vibrato\" ) # VOCAL_FILTER = SunVox :: ModuleType . new ( \"Vocal filter\" ) # WAVESHAPER = SunVox :: ModuleType . new ( \"WaveShaper\" ) #","title":"Effects"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects","text":"","title":"Effects"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects-constants","text":"","title":"Constants"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::AMPLIFIER","text":"","title":"AMPLIFIER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::COMPRESSOR","text":"","title":"COMPRESSOR"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::DC_BLOCKER","text":"","title":"DC_BLOCKER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::DELAY","text":"","title":"DELAY"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::DISTORTION","text":"","title":"DISTORTION"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::ECHO","text":"","title":"ECHO"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::EQ","text":"","title":"EQ"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::FILER_PRO","text":"","title":"FILER_PRO"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::FILTER","text":"","title":"FILTER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::FLANGER","text":"","title":"FLANGER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::LFO","text":"","title":"LFO"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::LOOP","text":"","title":"LOOP"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::MODULATOR","text":"","title":"MODULATOR"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::PITCH_SHIFTER","text":"","title":"PITCH_SHIFTER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::REVERB","text":"","title":"REVERB"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::VIBRATO","text":"","title":"VIBRATO"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::VOCAL_FILTER","text":"","title":"VOCAL_FILTER"},{"location":"SunVox/Modules/Effects.html#SunVox::Modules::Effects::WAVESHAPER","text":"","title":"WAVESHAPER"},{"location":"SunVox/Modules/Misc.html","text":"module SunVox::Modules::Misc # Constants # ADSR = SunVox :: ModuleType . new ( \"ADSR\" ) # CTL_2_NOTE = SunVox :: ModuleType . new ( \"Ctl2Note\" ) # FEEDBACK = SunVox :: ModuleType . new ( \"Feedback\" ) # GLIDE = SunVox :: ModuleType . new ( \"Glide\" ) # GPIO = SunVox :: ModuleType . new ( \"GPIO\" ) # METAMODULE = SunVox :: ModuleType . new ( \"MetaModule\" ) # MULTICTL = SunVox :: ModuleType . new ( \"MultiC tl\" ) # MULTISYNTH = SunVox :: ModuleType . new ( \"MultiSynth\" ) # PITCH_2_CTL = SunVox :: ModuleType . new ( \"Pitch2Ctl\" ) # PITCH_DETECTOR = SunVox :: ModuleType . new ( \"Pitch Detector\" ) # SOUND_2_CTL = SunVox :: ModuleType . new ( \"Sound2Ctl\" ) # VELOCITY_2_CTL = SunVox :: ModuleType . new ( \"Velocity2Ctl\" ) #","title":"Misc"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc","text":"","title":"Misc"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc-constants","text":"","title":"Constants"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::ADSR","text":"","title":"ADSR"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::CTL_2_NOTE","text":"","title":"CTL_2_NOTE"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::FEEDBACK","text":"","title":"FEEDBACK"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::GLIDE","text":"","title":"GLIDE"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::GPIO","text":"","title":"GPIO"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::METAMODULE","text":"","title":"METAMODULE"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::MULTICTL","text":"","title":"MULTICTL"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::MULTISYNTH","text":"","title":"MULTISYNTH"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::PITCH_2_CTL","text":"","title":"PITCH_2_CTL"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::PITCH_DETECTOR","text":"","title":"PITCH_DETECTOR"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::SOUND_2_CTL","text":"","title":"SOUND_2_CTL"},{"location":"SunVox/Modules/Misc.html#SunVox::Modules::Misc::VELOCITY_2_CTL","text":"","title":"VELOCITY_2_CTL"},{"location":"SunVox/Modules/Synths.html","text":"module SunVox::Modules::Synths # Constants # ANALOG_GENERATOR = SunVox :: ModuleType . new ( \"Analog generator\" ) # DRUM_SYNTH = SunVox :: ModuleType . new ( \"DrumSynth\" ) # FM = SunVox :: ModuleType . new ( \"FM\" ) # GENERATOR = SunVox :: ModuleType . new ( \"Generator\" ) # INPUT = SunVox :: ModuleType . new ( \"Input\" ) # KICKER = SunVox :: ModuleType . new ( \"Kicker\" ) # SAMPLER = SunVox :: ModuleType . new ( \"Sampler\" ) # SPECTRAVOICE = SunVox :: ModuleType . new ( \"SpectraVoice\" ) # VORBIS_PLAYER = SunVox :: ModuleType . new ( \"Vorbis player\" ) #","title":"Synths"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths","text":"","title":"Synths"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths-constants","text":"","title":"Constants"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::ANALOG_GENERATOR","text":"","title":"ANALOG_GENERATOR"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::DRUM_SYNTH","text":"","title":"DRUM_SYNTH"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::FM","text":"","title":"FM"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::GENERATOR","text":"","title":"GENERATOR"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::INPUT","text":"","title":"INPUT"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::KICKER","text":"","title":"KICKER"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::SAMPLER","text":"","title":"SAMPLER"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::SPECTRAVOICE","text":"","title":"SPECTRAVOICE"},{"location":"SunVox/Modules/Synths.html#SunVox::Modules::Synths::VORBIS_PLAYER","text":"","title":"VORBIS_PLAYER"}]}